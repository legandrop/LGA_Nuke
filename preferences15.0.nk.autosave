#! C:/Program Files/Nuke15.0v4/nuke-15.0.4.dll -nx
version 15.0 v4
define_window_layout_xml {<?xml version="1.0" encoding="UTF-8"?>
<layout version="1.0">
    <window x="-1" y="-8" w="3440" h="1369" maximized="1" screen="0">
        <splitter orientation="1">
            <split size="40"/>
            <dock id="" hideTitles="1" activePageId="Toolbar.1">
                <page id="Toolbar.1"/>
            </dock>
            <split size="1314" stretch="1"/>
            <splitter orientation="2">
                <split size="1001"/>
                <dock id="" activePageId="DAG.1" focus="true">
                    <page id="DAG.1"/>
                </dock>
                <split size="323"/>
                <splitter orientation="1">
                    <split size="394"/>
                    <dock id="" activePageId="Progress.1">
                        <page id="Progress.1"/>
                        <page id="com.lega.perfTime"/>
                    </dock>
                    <split size="916"/>
                    <dock id="" activePageId="DopeSheet.1">
                        <page id="DopeSheet.1"/>
                        <page id="Curve Editor.1"/>
                        <page id="Error Console.1"/>
                        <page id="uk.co.thefoundry.backgroundrenderview.1"/>
                    </dock>
                </splitter>
            </splitter>
            <split size="494"/>
            <splitter orientation="2">
                <split size="1328"/>
                <dock id="" activePageId="Properties.1">
                    <page id="Properties.1"/>
                </dock>
            </splitter>
            <split size="788"/>
            <dock id="" activePageId="com.adrianpueyo.KnobScripterPane">
                <page id="com.adrianpueyo.KnobScripterPane"/>
            </dock>
            <split size="788"/>
            <dock id="" activePageId="Viewer.1">
                <page id="Viewer.1"/>
            </dock>
        </splitter>
    </window>
</layout>
}
Root {
 inputs 0
 name C:/Users/leg4-pc/.nuke/preferences15.0.nk
 label <b></b>
 colorManagement OCIO
 OCIO_config aces_1.2
 defaultViewerLUT "OCIO LUTs"
 workingSpaceLUT "ACES - ACES2065-1"
 monitorLut "sRGB (ACES)"
 monitorOutLUT "sRGB (ACES)"
 int8Lut "Output - Rec.709"
 int16Lut texture_paint
 logLut compositing_log
 floatLut "ACES - ACES2065-1"
}
BackdropNode {
 inputs 0
 name BackdropNode1
 knobChanged "\ndef on_knob_changed():\n    node = nuke.thisNode()\n    knob = nuke.thisKnob()\n    \n    if knob.name() == \"text\" or knob.name() == \"Oz_Backdrop_bold\":\n        current_label = node\['text'].value()\n        if node\['Oz_Backdrop_bold'].value():\n            if '<b>' not in current_label and '</b>' not in current_label:\n                node\['label'].setValue(f\"<b>\{current_label\}</b>\")\n            else:\n                node\['label'].setValue(current_label)\n        else:\n            node\['label'].setValue(current_label.replace('<b>', '').replace('</b>', ''))\n\nnuke.addKnobChanged(on_knob_changed)\n"
 tile_color 0x2e342aff
 label <b>sdfs</b>
 note_font_size 54
 xpos -488
 ypos -264
 bdwidth 180
 bdheight 168
 addUserKnob {20 Settings}
 addUserKnob {43 text l Text}
 text sdfs
 addUserKnob {7 font_size l "Font Size" R 10 100}
 font_size 54
 addUserKnob {6 Oz_Backdrop_bold l Bold -STARTLINE}
 addUserKnob {4 alignment l "" -STARTLINE M {left center right}}
 addUserKnob {22 "Black / White" l B/W t "Toggle font color for the label text" -STARTLINE T "\nnode = nuke.thisNode()\ncurrent_label = node\['label'].value()\nif 'color=\"#ffffff\"' in current_label:\n    new_label = current_label.replace('color=\"#ffffff\"', 'color=\"#000000\"')\nelif 'color=\"#000000\"' in current_label:\n    new_label = current_label.replace('color=\"#000000\"', 'color=\"#ffffff\"')\nelse:\n    new_label = '<font color=\"#ffffff\">' + current_label + '</font>'\nnode\['label'].setValue(new_label)\n#print(\"Etiqueta despu√©s de cambiar:\", new_label)\n"}
 addUserKnob {26 divider1 l "" +STARTLINE}
 addUserKnob {26 S01 l " " T " "}
 addUserKnob {22 "Random Color" l " <img src=\"ColorBars.png\">" t "Generates a random color for the Backdrop (dark shades)" -STARTLINE T "import random\nn=nuke.thisNode()\nr,g,b=\[(float(random.randint( 20, 40)))/100,(float(random.randint( 10, 50)))/100,(float(random.randint( 15, 60)))/100]\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (int(r*255),int(g*255),int(b*255),1),16) )\n"}
 addUserKnob {22 Red l "<div style=\"background-color: #54352e; color: #54352e; font-size: 7px;\">______</div><div style=\"background-color: #70544e; color: #70544e; font-size: 7px;\">______</div><div style=\"background-color: #9b5647; color: #9b5647; font-size: 7px;\">______</div>" t "Quickly apply between 3 shades of red to the Backdrop" -STARTLINE T "import colorsys\nn=nuke.thisNode()\ndef clamp(x):\n    return int(max(0, min(x, 255)))\ntile_color=n\['tile_color'].value()\ncolors=\[\[0.03, 0.45, 0.33], \[0.03, 0.3, 0.44], \[0.03, 0.54, 0.61]]\n#converting colors\ncolors_hex=\[colorsys.hsv_to_rgb(color\[0],color\[1],color\[2]) for color in colors]\ncolors_int=\[int('%02x%02x%02x%02x' % (clamp(color\[0]*255),clamp(color\[1]*255),clamp(color\[2]*255),255), 16) for color in colors_hex]\n#selecting color logic\nif tile_color in colors_int:\n    current_index=colors_int.index(tile_color)\n    if current_index >= (len(colors_int)-1):\n        new_color = colors_int\[0]\n    else:\n        new_color = colors_int\[current_index+1]\nelse:\n    new_color = colors_int\[0]\n#apply color\nn\['tile_color'].setValue(new_color)"}
 addUserKnob {22 Orange l "<div style=\"background-color: #54472e; color: #54472e; font-size: 7px;\">______</div><div style=\"background-color: #70644e; color: #70644e; font-size: 7px;\">______</div><div style=\"background-color: #9b7e47; color: #9b7e47; font-size: 7px;\">______</div>" t "Quickly apply between 3 shades of orange to the Backdrop" -STARTLINE T "import colorsys\nn=nuke.thisNode()\ndef clamp(x):\n    return int(max(0, min(x, 255)))\ntile_color=n\['tile_color'].value()\ncolors=\[\[0.11, 0.45, 0.33], \[0.11, 0.3, 0.44], \[0.11, 0.54, 0.61]]\n#converting colors\ncolors_hex=\[colorsys.hsv_to_rgb(color\[0],color\[1],color\[2]) for color in colors]\ncolors_int=\[int('%02x%02x%02x%02x' % (clamp(color\[0]*255),clamp(color\[1]*255),clamp(color\[2]*255),255), 16) for color in colors_hex]\n#selecting color logic\nif tile_color in colors_int:\n    current_index=colors_int.index(tile_color)\n    if current_index >= (len(colors_int)-1):\n        new_color = colors_int\[0]\n    else:\n        new_color = colors_int\[current_index+1]\nelse:\n    new_color = colors_int\[0]\n#apply color\nn\['tile_color'].setValue(new_color)"}
 addUserKnob {22 Yellow l "<div style=\"background-color: #54522e; color: #54522e; font-size: 7px;\">______</div><div style=\"background-color: #706e4e; color: #706e4e; font-size: 7px;\">______</div><div style=\"background-color: #9b9847; color: #9b9847; font-size: 7px;\">______</div>" t "Quickly apply between 3 shades of yellow to the Backdrop" -STARTLINE T "import colorsys\nn=nuke.thisNode()\ndef clamp(x):\n    return int(max(0, min(x, 255)))\ntile_color=n\['tile_color'].value()\ncolors=\[\[0.16, 0.45, 0.33], \[0.16, 0.3, 0.44], \[0.16, 0.54, 0.61]]\n#converting colors\ncolors_hex=\[colorsys.hsv_to_rgb(color\[0],color\[1],color\[2]) for color in colors]\ncolors_int=\[int('%02x%02x%02x%02x' % (clamp(color\[0]*255),clamp(color\[1]*255),clamp(color\[2]*255),255), 16) for color in colors_hex]\n#selecting color logic\nif tile_color in colors_int:\n    current_index=colors_int.index(tile_color)\n    if current_index >= (len(colors_int)-1):\n        new_color = colors_int\[0]\n    else:\n        new_color = colors_int\[current_index+1]\nelse:\n    new_color = colors_int\[0]\n#apply color\nn\['tile_color'].setValue(new_color)"}
 addUserKnob {22 Green l "<div style=\"background-color: #31542e; color: #31542e; font-size: 7px;\">______</div><div style=\"background-color: #51704e; color: #51704e; font-size: 7px;\">______</div><div style=\"background-color: #4e9b47; color: #4e9b47; font-size: 7px;\">______</div>" t "Quickly apply between 3 shades of green to the Backdrop" -STARTLINE T "import colorsys\nn=nuke.thisNode()\ndef clamp(x):\n    return int(max(0, min(x, 255)))\ntile_color=n\['tile_color'].value()\ncolors=\[\[0.32, 0.45, 0.33], \[0.32, 0.3, 0.44], \[0.32, 0.54, 0.61]]\n#converting colors\ncolors_hex=\[colorsys.hsv_to_rgb(color\[0],color\[1],color\[2]) for color in colors]\ncolors_int=\[int('%02x%02x%02x%02x' % (clamp(color\[0]*255),clamp(color\[1]*255),clamp(color\[2]*255),255), 16) for color in colors_hex]\n#selecting color logic\nif tile_color in colors_int:\n    current_index=colors_int.index(tile_color)\n    if current_index >= (len(colors_int)-1):\n        new_color = colors_int\[0]\n    else:\n        new_color = colors_int\[current_index+1]\nelse:\n    new_color = colors_int\[0]\n#apply color\nn\['tile_color'].setValue(new_color)"}
 addUserKnob {22 Cyan l "<div style=\"background-color: #2e5451; color: #2e5451; font-size: 7px;\">______</div><div style=\"background-color: #4e706e; color: #4e706e; font-size: 7px;\">______</div><div style=\"background-color: #479b96; color: #479b96; font-size: 7px;\">______</div>" t "Quickly apply between 3 shades of cyan to the Backdrop" -STARTLINE T "import colorsys\nn=nuke.thisNode()\ndef clamp(x):\n    return int(max(0, min(x, 255)))\ntile_color=n\['tile_color'].value()\ncolors=\[\[0.49, 0.45, 0.33], \[0.49, 0.3, 0.44], \[0.49, 0.54, 0.61]]\n#converting colors\ncolors_hex=\[colorsys.hsv_to_rgb(color\[0],color\[1],color\[2]) for color in colors]\ncolors_int=\[int('%02x%02x%02x%02x' % (clamp(color\[0]*255),clamp(color\[1]*255),clamp(color\[2]*255),255), 16) for color in colors_hex]\n#selecting color logic\nif tile_color in colors_int:\n    current_index=colors_int.index(tile_color)\n    if current_index >= (len(colors_int)-1):\n        new_color = colors_int\[0]\n    else:\n        new_color = colors_int\[current_index+1]\nelse:\n    new_color = colors_int\[0]\n#apply color\nn\['tile_color'].setValue(new_color)"}
 addUserKnob {22 Blue l "<div style=\"background-color: #2e4854; color: #2e4854; font-size: 7px;\">______</div><div style=\"background-color: #4e6670; color: #4e6670; font-size: 7px;\">______</div><div style=\"background-color: #47829b; color: #47829b; font-size: 7px;\">______</div>" t "Quickly apply between 3 shades of blue to the Backdrop" -STARTLINE T "import colorsys\nn=nuke.thisNode()\ndef clamp(x):\n    return int(max(0, min(x, 255)))\ntile_color=n\['tile_color'].value()\ncolors=\[\[0.55, 0.45, 0.33], \[0.55, 0.3, 0.44], \[0.55, 0.54, 0.61]]\n#converting colors\ncolors_hex=\[colorsys.hsv_to_rgb(color\[0],color\[1],color\[2]) for color in colors]\ncolors_int=\[int('%02x%02x%02x%02x' % (clamp(color\[0]*255),clamp(color\[1]*255),clamp(color\[2]*255),255), 16) for color in colors_hex]\n#selecting color logic\nif tile_color in colors_int:\n    current_index=colors_int.index(tile_color)\n    if current_index >= (len(colors_int)-1):\n        new_color = colors_int\[0]\n    else:\n        new_color = colors_int\[current_index+1]\nelse:\n    new_color = colors_int\[0]\n#apply color\nn\['tile_color'].setValue(new_color)"}
 addUserKnob {22 Dark_blue l "<div style=\"background-color: #3a2e54; color: #3a2e54; font-size: 7px;\">______</div><div style=\"background-color: #4e4f70; color: #4e4f70; font-size: 7px;\">______</div><div style=\"background-color: #474a9b; color: #474a9b; font-size: 7px;\">______</div>" t "Quickly apply between 3 shades of dark_blue to the Backdrop" -STARTLINE T "import colorsys\nn=nuke.thisNode()\ndef clamp(x):\n    return int(max(0, min(x, 255)))\ntile_color=n\['tile_color'].value()\ncolors=\[\[0.72, 0.45, 0.33], \[0.66, 0.3, 0.44], \[0.66, 0.54, 0.61]]\n#converting colors\ncolors_hex=\[colorsys.hsv_to_rgb(color\[0],color\[1],color\[2]) for color in colors]\ncolors_int=\[int('%02x%02x%02x%02x' % (clamp(color\[0]*255),clamp(color\[1]*255),clamp(color\[2]*255),255), 16) for color in colors_hex]\n#selecting color logic\nif tile_color in colors_int:\n    current_index=colors_int.index(tile_color)\n    if current_index >= (len(colors_int)-1):\n        new_color = colors_int\[0]\n    else:\n        new_color = colors_int\[current_index+1]\nelse:\n    new_color = colors_int\[0]\n#apply color\nn\['tile_color'].setValue(new_color)"}
 addUserKnob {22 Magenta l "<div style=\"background-color: #4a2e54; color: #4a2e54; font-size: 7px;\">______</div><div style=\"background-color: #674e70; color: #674e70; font-size: 7px;\">______</div><div style=\"background-color: #85479b; color: #85479b; font-size: 7px;\">______</div>" t "Quickly apply between 3 shades of magenta to the Backdrop" -STARTLINE T "import colorsys\nn=nuke.thisNode()\ndef clamp(x):\n    return int(max(0, min(x, 255)))\ntile_color=n\['tile_color'].value()\ncolors=\[\[0.79, 0.45, 0.33], \[0.79, 0.3, 0.44], \[0.79, 0.54, 0.61]]\n#converting colors\ncolors_hex=\[colorsys.hsv_to_rgb(color\[0],color\[1],color\[2]) for color in colors]\ncolors_int=\[int('%02x%02x%02x%02x' % (clamp(color\[0]*255),clamp(color\[1]*255),clamp(color\[2]*255),255), 16) for color in colors_hex]\n#selecting color logic\nif tile_color in colors_int:\n    current_index=colors_int.index(tile_color)\n    if current_index >= (len(colors_int)-1):\n        new_color = colors_int\[0]\n    else:\n        new_color = colors_int\[current_index+1]\nelse:\n    new_color = colors_int\[0]\n#apply color\nn\['tile_color'].setValue(new_color)"}
 addUserKnob {22 Pink l "<div style=\"background-color: #542e49; color: #542e49; font-size: 7px;\">______</div><div style=\"background-color: #704e66; color: #704e66; font-size: 7px;\">______</div><div style=\"background-color: #9b4784; color: #9b4784; font-size: 7px;\">______</div>" t "Quickly apply between 3 shades of pink to the Backdrop" -STARTLINE T "import colorsys\nn=nuke.thisNode()\ndef clamp(x):\n    return int(max(0, min(x, 255)))\ntile_color=n\['tile_color'].value()\ncolors=\[\[0.88, 0.45, 0.33], \[0.88, 0.3, 0.44], \[0.88, 0.54, 0.61]]\n#converting colors\ncolors_hex=\[colorsys.hsv_to_rgb(color\[0],color\[1],color\[2]) for color in colors]\ncolors_int=\[int('%02x%02x%02x%02x' % (clamp(color\[0]*255),clamp(color\[1]*255),clamp(color\[2]*255),255), 16) for color in colors_hex]\n#selecting color logic\nif tile_color in colors_int:\n    current_index=colors_int.index(tile_color)\n    if current_index >= (len(colors_int)-1):\n        new_color = colors_int\[0]\n    else:\n        new_color = colors_int\[current_index+1]\nelse:\n    new_color = colors_int\[0]\n#apply color\nn\['tile_color'].setValue(new_color)"}
 addUserKnob {26 space l " " T " "}
 addUserKnob {22 Input l "<div style=\"background-color: #999999; color: #999999; font-size: 7px;\">______</div><div style=\"background-color: #999999; color: #999999; font-size: 7px;\">______</div><div style=\"background-color: #999999; color: #999999; font-size: 7px;\">______</div><div>Input</div>" t "Quickly apply a Backdrop for Cam" -STARTLINE T "import colorsys\nn=nuke.thisNode()\ndef clamp(x):\n    return int(max(0, min(x, 255)))\ntile_color=n\['tile_color'].value()\ncolors=\[\[0.0, 0.0, 0.6], \[0.0, 0.0, 0.6], \[0.0, 0.0, 0.6]]\n#converting colors\ncolors_hex=\[colorsys.hsv_to_rgb(color\[0],color\[1],color\[2]) for color in colors]\ncolors_int=\[int('%02x%02x%02x%02x' % (clamp(color\[0]*255),clamp(color\[1]*255),clamp(color\[2]*255),255), 16) for color in colors_hex]\n#selecting color logic\nif tile_color in colors_int:\n    current_index=colors_int.index(tile_color)\n    if current_index >= (len(colors_int)-1):\n        new_color = colors_int\[0]\n    else:\n        new_color = colors_int\[current_index+1]\nelse:\n    new_color = colors_int\[0]\n#apply color\nn\['tile_color'].setValue(new_color)"}
 addUserKnob {22 Aovs l "<div style=\"background-color: #666666; color: #666666; font-size: 7px;\">______</div><div style=\"background-color: #666666; color: #666666; font-size: 7px;\">______</div><div style=\"background-color: #666666; color: #666666; font-size: 7px;\">______</div><div>Aovs</div>" t "Quickly apply a Backdrop for Elements" -STARTLINE T "import colorsys\nn=nuke.thisNode()\ndef clamp(x):\n    return int(max(0, min(x, 255)))\ntile_color=n\['tile_color'].value()\ncolors=\[\[0.0, 0.0, 0.4], \[0.0, 0.0, 0.4], \[0.0, 0.0, 0.4]]\n#converting colors\ncolors_hex=\[colorsys.hsv_to_rgb(color\[0],color\[1],color\[2]) for color in colors]\ncolors_int=\[int('%02x%02x%02x%02x' % (clamp(color\[0]*255),clamp(color\[1]*255),clamp(color\[2]*255),255), 16) for color in colors_hex]\n#selecting color logic\nif tile_color in colors_int:\n    current_index=colors_int.index(tile_color)\n    if current_index >= (len(colors_int)-1):\n        new_color = colors_int\[0]\n    else:\n        new_color = colors_int\[current_index+1]\nelse:\n    new_color = colors_int\[0]\n#apply color\nn\['tile_color'].setValue(new_color)"}
 addUserKnob {22 Matt l "<div style=\"background-color: #767f75; color: #767f75; font-size: 7px;\">______</div><div style=\"background-color: #767f75; color: #767f75; font-size: 7px;\">______</div><div style=\"background-color: #767f75; color: #767f75; font-size: 7px;\">______</div><div>Matt</div>" t "Quickly apply a Backdrop for Key" -STARTLINE T "import colorsys\nn=nuke.thisNode()\ndef clamp(x):\n    return int(max(0, min(x, 255)))\ntile_color=n\['tile_color'].value()\ncolors=\[\[0.32, 0.08, 0.5], \[0.32, 0.08, 0.5], \[0.32, 0.08, 0.5]]\n#converting colors\ncolors_hex=\[colorsys.hsv_to_rgb(color\[0],color\[1],color\[2]) for color in colors]\ncolors_int=\[int('%02x%02x%02x%02x' % (clamp(color\[0]*255),clamp(color\[1]*255),clamp(color\[2]*255),255), 16) for color in colors_hex]\n#selecting color logic\nif tile_color in colors_int:\n    current_index=colors_int.index(tile_color)\n    if current_index >= (len(colors_int)-1):\n        new_color = colors_int\[0]\n    else:\n        new_color = colors_int\[current_index+1]\nelse:\n    new_color = colors_int\[0]\n#apply color\nn\['tile_color'].setValue(new_color)"}
 addUserKnob {22 Crypt l "<div style=\"background-color: #34662f; color: #34662f; font-size: 7px;\">______</div><div style=\"background-color: #34662f; color: #34662f; font-size: 7px;\">______</div><div style=\"background-color: #34662f; color: #34662f; font-size: 7px;\">______</div><div>Crypt</div>" t "Quickly apply a Backdrop for Cleanup" -STARTLINE T "import colorsys\nn=nuke.thisNode()\ndef clamp(x):\n    return int(max(0, min(x, 255)))\ntile_color=n\['tile_color'].value()\ncolors=\[\[0.32, 0.53, 0.4], \[0.32, 0.53, 0.4], \[0.32, 0.53, 0.4]]\n#converting colors\ncolors_hex=\[colorsys.hsv_to_rgb(color\[0],color\[1],color\[2]) for color in colors]\ncolors_int=\[int('%02x%02x%02x%02x' % (clamp(color\[0]*255),clamp(color\[1]*255),clamp(color\[2]*255),255), 16) for color in colors_hex]\n#selecting color logic\nif tile_color in colors_int:\n    current_index=colors_int.index(tile_color)\n    if current_index >= (len(colors_int)-1):\n        new_color = colors_int\[0]\n    else:\n        new_color = colors_int\[current_index+1]\nelse:\n    new_color = colors_int\[0]\n#apply color\nn\['tile_color'].setValue(new_color)"}
 addUserKnob {22 Refe l "<div style=\"background-color: #273c56; color: #273c56; font-size: 7px;\">______</div><div style=\"background-color: #273c56; color: #273c56; font-size: 7px;\">______</div><div style=\"background-color: #273c56; color: #273c56; font-size: 7px;\">______</div>" t "Quickly apply a Backdrop for Ref" -STARTLINE T "import colorsys\nn=nuke.thisNode()\ndef clamp(x):\n    return int(max(0, min(x, 255)))\ntile_color=n\['tile_color'].value()\ncolors=\[\[0.59, 0.55, 0.34], \[0.59, 0.55, 0.34], \[0.59, 0.55, 0.34]]\n#converting colors\ncolors_hex=\[colorsys.hsv_to_rgb(color\[0],color\[1],color\[2]) for color in colors]\ncolors_int=\[int('%02x%02x%02x%02x' % (clamp(color\[0]*255),clamp(color\[1]*255),clamp(color\[2]*255),255), 16) for color in colors_hex]\n#selecting color logic\nif tile_color in colors_int:\n    current_index=colors_int.index(tile_color)\n    if current_index >= (len(colors_int)-1):\n        new_color = colors_int\[0]\n    else:\n        new_color = colors_int\[current_index+1]\nelse:\n    new_color = colors_int\[0]\n#apply color\nn\['tile_color'].setValue(new_color)"}
 addUserKnob {22 Otro l "<div style=\"background-color: #465177; color: #465177; font-size: 7px;\">______</div><div style=\"background-color: #465177; color: #465177; font-size: 7px;\">______</div><div style=\"background-color: #465177; color: #465177; font-size: 7px;\">______</div>" t "Quickly apply a Backdrop for Pub" -STARTLINE T "import colorsys\nn=nuke.thisNode()\ndef clamp(x):\n    return int(max(0, min(x, 255)))\ntile_color=n\['tile_color'].value()\ncolors=\[\[0.63, 0.41, 0.47], \[0.63, 0.41, 0.47], \[0.63, 0.41, 0.47]]\n#converting colors\ncolors_hex=\[colorsys.hsv_to_rgb(color\[0],color\[1],color\[2]) for color in colors]\ncolors_int=\[int('%02x%02x%02x%02x' % (clamp(color\[0]*255),clamp(color\[1]*255),clamp(color\[2]*255),255), 16) for color in colors_hex]\n#selecting color logic\nif tile_color in colors_int:\n    current_index=colors_int.index(tile_color)\n    if current_index >= (len(colors_int)-1):\n        new_color = colors_int\[0]\n    else:\n        new_color = colors_int\[current_index+1]\nelse:\n    new_color = colors_int\[0]\n#apply color\nn\['tile_color'].setValue(new_color)"}
 addUserKnob {26 S08 l " " T " "}
 addUserKnob {22 copy_color l "   Copy Color   " -STARTLINE T "\nimport subprocess\nimport platform\n\nnode = nuke.thisNode()\n\ntile_color = node\['tile_color'].value()\ntile_color_hex = '\{:08x\}'.format(tile_color)  # Convertir a cadena hexadecimal de 8 d√≠gitos\n\n# Copiar al portapapeles seg√∫n el sistema operativo\nif platform.system() == 'Windows':\n    cmd = 'echo ' + tile_color_hex + '| clip'\n    subprocess.run(cmd, shell=True)\nelif platform.system() == 'Darwin':\n    cmd = 'echo ' + tile_color_hex + ' | pbcopy'\n    subprocess.run(cmd, shell=True)\nelse:\n    print(\"Sistema operativo no soportado para copiar al portapapeles\")\n\n#print(\"Color copiado al portapapeles:\", tile_color_hex)\n"}
 addUserKnob {22 paste_color l "   Paste Color   " -STARTLINE T "\nimport subprocess\nimport platform\n\nnode = nuke.thisNode()\n\n# Obtener el valor del portapapeles seg√∫n el sistema operativo\nif platform.system() == 'Windows':\n    cmd = 'powershell Get-Clipboard'\n    result = subprocess.run(cmd, shell=True, capture_output=True, text=True)\n    tile_color_hex = result.stdout.strip()\nelif platform.system() == 'Darwin':\n    cmd = 'pbpaste'\n    result = subprocess.run(cmd, shell=True, capture_output=True, text=True)\n    tile_color_hex = result.stdout.strip()\nelse:\n    print(\"Sistema operativo no soportado para pegar desde el portapapeles\")\n    tile_color_hex = None\n\nif tile_color_hex:\n    try:\n        tile_color = int(tile_color_hex, 16)\n        node\['tile_color'].setValue(tile_color)\n        #print(\"Color pegado desde el portapapeles:\", tile_color_hex)\n    except ValueError:\n        print(\"El valor en el portapapeles no es un color v√°lido\")\n"}
 addUserKnob {26 S07 l " " T " "}
 addUserKnob {4 oz_appearance l " Appearance      " -STARTLINE M {Fill Border}}
 addUserKnob {26 S08 l " " -STARTLINE T "       "}
 addUserKnob {7 "" l Border t "Border width for Border appearence" -STARTLINE R 0 10}
 addUserKnob {26 divider2 l "" +STARTLINE}
 addUserKnob {26 S02 l " " T " "}
 addUserKnob {22 grow l " <img src=\"MergeMin.png\">" t "Grows the size of the Backdrop by 50pt in every direction" -STARTLINE T "n=nuke.thisNode()\n\ndef grow(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()-step)\n            n\['ypos'].setValue(n\['ypos'].getValue()-step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()+step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()+step*2)\n    except e:\n        print('Error:: %s' % e)\n\ngrow(n,50)"}
 addUserKnob {22 shrink l " <img src=\"MergeMax.png\">" t "Shrinks the size of the Backdrop by 50pt in every direction" -STARTLINE T "n=nuke.thisNode()\n\ndef shrink(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()+step)\n            n\['ypos'].setValue(n\['ypos'].getValue()+step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()-step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()-step*2)\n    except e:\n        print('Error:: %s' % e)\n\nshrink(n,50)"}
 addUserKnob {26 S03 l " " -STARTLINE T "     "}
 addUserKnob {22 encompassSelectedNodes l " <img src=\"ContactSheet.png\">" t "Will resize the backdrop to encompass every selected nodes plus a padding number (the number next to the button)" -STARTLINE T "this = nuke.thisNode()\npadding = this\['sides'].getValue()\nif this.isSelected:\n    this.setSelected(False)\nselNodes = nuke.selectedNodes()\n        \ndef nodeIsInside (node, backdropNode):\n    # Returns true if node geometry is inside backdropNode otherwise returns false\n    topLeftNode = \[node.xpos(), node.ypos()]\n    topLeftBackDrop = \[backdropNode.xpos(), backdropNode.ypos()]\n    bottomRightNode = \[node.xpos() + node.screenWidth(), node.ypos() + node.screenHeight()]\n    bottomRightBackdrop = \[backdropNode.xpos() + backdropNode.screenWidth(), backdropNode.ypos() + backdropNode.screenHeight()]\n                    \n    topLeft = ( topLeftNode\[0] >= topLeftBackDrop\[0] ) and ( topLeftNode\[1] >= topLeftBackDrop\[1] )\n    bottomRight = ( bottomRightNode\[0] <= bottomRightBackdrop\[0] ) and ( bottomRightNode\[1] <= bottomRightBackdrop\[1] )\n                    \n    return topLeft and bottomRight\n\nif not selNodes:\n    nuke.message('Some nodes should be selected')\nelse:\n    # Calculate bounds for the backdrop node.\n    bdX = min(\[node.xpos() for node in selNodes])\n    bdY = min(\[node.ypos() for node in selNodes])\n    bdW = max(\[node.xpos() + node.screenWidth() for node in selNodes]) - bdX\n    bdH = max(\[node.ypos() + node.screenHeight() for node in selNodes]) - bdY\n                        \n    zOrder = 0\n    selectedBackdropNodes = nuke.selectedNodes( \"BackdropNode\" )\n\n    #if there are backdropNodes selected put the new one immediately behind the farthest one\n                \n    if len( selectedBackdropNodes ):\n        zOrder = min( \[node.knob( \"z_order\" ).value() for node in selectedBackdropNodes] ) - 1\n    else :\n        #otherwise (no backdrop in selection) find the nearest backdrop if exists and set the new one in front of it\n        nonSelectedBackdropNodes = nuke.allNodes(\"BackdropNode\")\n        for nonBackdrop in selNodes:\n            for backdrop in nonSelectedBackdropNodes:\n                if nodeIsInside( nonBackdrop, backdrop ):\n                    zOrder = max( zOrder, backdrop.knob( \"z_order\" ).value() + 1 )\n    \n    # Expand the bounds to leave a little border. Elements are offsets for left, top, right and bottom edges respectively\n    left, top, right, bottom = (-padding, -(padding+70), padding, padding)\n    bdX += left\n    bdY += top\n    bdW += (right - left)\n    bdH += (bottom - top)\n\n    this\['xpos'].setValue(bdX)\n    this\['bdwidth'].setValue(bdW)\n    this\['ypos'].setValue(bdY)\n    this\['bdheight'].setValue(bdH)\n    this\['z_order'].setValue(zOrder)\n"}
 addUserKnob {26 S04 l " " -STARTLINE T " "}
 addUserKnob {3 sides l "" t "When encompassing nodes this number of pt will be added to the Backdrop size in every direction" -STARTLINE}
 sides 50
 addUserKnob {26 divider3 l "" +STARTLINE}
 addUserKnob {26 S05 l " " -STARTLINE T " "}
 addUserKnob {26 pos_text l Position -STARTLINE T " "}
 addUserKnob {3 node_position_x l x -STARTLINE}
 addUserKnob {3 node_position_y l y -STARTLINE}
 addUserKnob {26 S06 l " " T " "}
 addUserKnob {14 sizeNode l "Size       " -STARTLINE R 0 100}
 sizeNode {0 0}
 addUserKnob {26 S09 l " " T " "}
 addUserKnob {22 "Copy Width" l "Copy W" t "Copy the width of this backdrop to use in another backdrop" -STARTLINE T "\nimport subprocess\nimport platform\n\nnode = nuke.thisNode()\n\n# Llamar a la funci√≥n updateKnobs para actualizar todos los valores\ndef updateKnobs(node):\n    nodeWidth = node\['bdwidth'].getValue()\n    nodeHeight = node\['bdheight'].getValue()\n    node\['sizeNode'].setValue(\[int(nodeWidth), int(nodeHeight)])\n    node\['zorder'].setValue(int(node\['z_order'].getValue()))\n    node\['font_size'].setValue(int(node\['note_font_size'].getValue()))\n    node\['oz_appearance'].setValue(node\['appearance'].value())\n    node\['oz_border_width'].setValue(node\['border_width'].value())\n\nupdateKnobs(node)\n\nsize_w = node\['sizeNode'].getValue()\[0]\n\n# Copiar al portapapeles seg√∫n el sistema operativo\nif platform.system() == 'Windows':\n    cmd = 'echo ' + str(size_w).strip() + '| clip'\n    subprocess.run(cmd, shell=True)\nelif platform.system() == 'Darwin':\n    cmd = 'echo ' + str(size_w).strip() + ' | pbcopy'\n    subprocess.run(cmd, shell=True)\nelse:\n    print(\"Sistema operativo no soportado para copiar al portapapeles\")\n\n#print(\"Size W copiado al portapapeles:\", size_w)\n"}
 addUserKnob {22 "Paste Width" l "Paste W" t "Set this backdrop's width using the value copied from another backdrop" -STARTLINE T "\nimport subprocess\nimport platform\n\nnode = nuke.thisNode()\n\n# Obtener el valor del portapapeles seg√∫n el sistema operativo\nif platform.system() == 'Windows':\n    cmd = 'powershell Get-Clipboard'\n    result = subprocess.run(cmd, shell=True, capture_output=True, text=True)\n    size_w = result.stdout.strip()\nelif platform.system() == 'Darwin':\n    cmd = 'pbpaste'\n    result = subprocess.run(cmd, shell=True, capture_output=True, text=True)\n    size_w = result.stdout.strip()\nelse:\n    print(\"Sistema operativo no soportado para pegar desde el portapapeles\")\n    size_w = None\n\nif size_w:\n    try:\n        size_w = float(size_w)\n        node\['bdwidth'].setValue(size_w)\n        node\['sizeNode'].setValue(\[size_w, node\['sizeNode'].getValue()\[1]])\n        #print(\"Size W pegado desde el portapapeles:\", size_w)\n    except ValueError:\n        print(\"El valor en el portapapeles no es un n√∫mero v√°lido\")\n"}
 addUserKnob {22 "Copy Height" l "Copy H" t "Copy the height of this backdrop to use in another backdrop" -STARTLINE T "\nimport subprocess\nimport platform\n\nnode = nuke.thisNode()\n\n# Llamar a la funci√≥n updateKnobs para actualizar todos los valores\ndef updateKnobs(node):\n    nodeWidth = node\['bdwidth'].getValue()\n    nodeHeight = node\['bdheight'].getValue()\n    node\['sizeNode'].setValue(\[int(nodeWidth), int(nodeHeight)])\n    node\['zorder'].setValue(int(node\['z_order'].getValue()))\n    node\['font_size'].setValue(int(node\['note_font_size'].getValue()))\n    node\['oz_appearance'].setValue(node\['appearance'].value())\n    node\['oz_border_width'].setValue(node\['border_width'].value())\n\nupdateKnobs(node)\n\nsize_h = node\['sizeNode'].getValue()\[1]\n\n# Copiar al portapapeles seg√∫n el sistema operativo\nif platform.system() == 'Windows':\n    cmd = 'echo ' + str(size_h).strip() + '| clip'\n    subprocess.run(cmd, shell=True)\nelif platform.system() == 'Darwin':\n    cmd = 'echo ' + str(size_h).strip() + ' | pbcopy'\n    subprocess.run(cmd, shell=True)\nelse:\n    print(\"Sistema operativo no soportado para copiar al portapapeles\")\n\n#print(\"Size H copiado al portapapeles:\", size_h)\n"}
 addUserKnob {22 "Paste Height" l "Paste H" t "Set this backdrop's height using the value copied from another backdrop" -STARTLINE T "\nimport subprocess\nimport platform\n\nnode = nuke.thisNode()\n\n# Obtener el valor del portapapeles seg√∫n el sistema operativo\nif platform.system() == 'Windows':\n    cmd = 'powershell Get-Clipboard'\n    result = subprocess.run(cmd, shell=True, capture_output=True, text=True)\n    size_h = result.stdout.strip()\nelif platform.system() == 'Darwin':\n    cmd = 'pbpaste'\n    result = subprocess.run(cmd, shell=True, capture_output=True, text=True)\n    size_h = result.stdout.strip()\nelse:\n    print(\"Sistema operativo no soportado para pegar desde el portapapeles\")\n    size_h = None\n\nif size_h:\n    try:\n        size_h = float(size_h)\n        node\['bdheight'].setValue(size_h)\n        node\['sizeNode'].setValue(\[node\['sizeNode'].getValue()\[0], size_h])\n        #print(\"Size H pegado desde el portapapeles:\", size_h)\n    except ValueError:\n        print(\"El valor en el portapapeles no es un n√∫mero v√°lido\")\n"}
 addUserKnob {26 divider4 l "" +STARTLINE}
 addUserKnob {26 "Z Order" l "" -STARTLINE T "Z Order     "}
 addUserKnob {26 "" -STARTLINE T "Back "}
 addUserKnob {7 zorder l "" -STARTLINE R -5 5}
 addUserKnob {26 "" -STARTLINE T " Front"}
}
BackdropNode {
 inputs 0
 name BackdropNode2
 knobChanged "\ndef on_knob_changed():\n    node = nuke.thisNode()\n    knob = nuke.thisKnob()\n    \n    if knob.name() == \"text\" or knob.name() == \"Oz_Backdrop_bold\":\n        current_label = node\['text'].value()\n        if node\['Oz_Backdrop_bold'].value():\n            if '<b>' not in current_label and '</b>' not in current_label:\n                node\['label'].setValue(f\"<b>\{current_label\}</b>\")\n            else:\n                node\['label'].setValue(current_label)\n        else:\n            node\['label'].setValue(current_label.replace('<b>', '').replace('</b>', ''))\n\nnuke.addKnobChanged(on_knob_changed)\n"
 tile_color 0x222822ff
 note_font_size 54
 selected true
 xpos -390
 ypos -675
 bdwidth 180
 bdheight 168
 addUserKnob {20 Settings}
 addUserKnob {43 text l Text}
 addUserKnob {7 font_size l "Font Size" R 10 100}
 font_size 54
 addUserKnob {6 Oz_Backdrop_bold l Bold -STARTLINE}
 addUserKnob {4 alignment l "" -STARTLINE M {left center right}}
 addUserKnob {22 "Black / White" l B/W t "Toggle font color for the label text" -STARTLINE T "\nnode = nuke.thisNode()\ncurrent_label = node\['label'].value()\nif 'color=\"#ffffff\"' in current_label:\n    new_label = current_label.replace('color=\"#ffffff\"', 'color=\"#000000\"')\nelif 'color=\"#000000\"' in current_label:\n    new_label = current_label.replace('color=\"#000000\"', 'color=\"#ffffff\"')\nelse:\n    new_label = '<font color=\"#ffffff\">' + current_label + '</font>'\nnode\['label'].setValue(new_label)\n#print(\"Etiqueta despu√©s de cambiar:\", new_label)\n"}
 addUserKnob {26 divider1 l "" +STARTLINE}
 addUserKnob {26 S01 l " " T " "}
 addUserKnob {22 "Random Color" l " <img src=\"ColorBars.png\">" t "Generates a random color for the Backdrop (dark shades)" -STARTLINE T "import random\nn=nuke.thisNode()\nr,g,b=\[(float(random.randint( 20, 40)))/100,(float(random.randint( 10, 50)))/100,(float(random.randint( 15, 60)))/100]\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (int(r*255),int(g*255),int(b*255),1),16) )\n"}
 addUserKnob {22 Red l "<div style=\"background-color: #54352e; color: #54352e; font-size: 7px;\">______</div><div style=\"background-color: #70544e; color: #70544e; font-size: 7px;\">______</div><div style=\"background-color: #9b5647; color: #9b5647; font-size: 7px;\">______</div>" t "Quickly apply between 3 shades of red to the Backdrop" -STARTLINE T "import colorsys\nn=nuke.thisNode()\ndef clamp(x):\n    return int(max(0, min(x, 255)))\ntile_color=n\['tile_color'].value()\ncolors=\[\[0.03, 0.45, 0.33], \[0.03, 0.3, 0.44], \[0.03, 0.54, 0.61]]\n#converting colors\ncolors_hex=\[colorsys.hsv_to_rgb(color\[0],color\[1],color\[2]) for color in colors]\ncolors_int=\[int('%02x%02x%02x%02x' % (clamp(color\[0]*255),clamp(color\[1]*255),clamp(color\[2]*255),255), 16) for color in colors_hex]\n#selecting color logic\nif tile_color in colors_int:\n    current_index=colors_int.index(tile_color)\n    if current_index >= (len(colors_int)-1):\n        new_color = colors_int\[0]\n    else:\n        new_color = colors_int\[current_index+1]\nelse:\n    new_color = colors_int\[0]\n#apply color\nn\['tile_color'].setValue(new_color)"}
 addUserKnob {22 Orange l "<div style=\"background-color: #54472e; color: #54472e; font-size: 7px;\">______</div><div style=\"background-color: #70644e; color: #70644e; font-size: 7px;\">______</div><div style=\"background-color: #9b7e47; color: #9b7e47; font-size: 7px;\">______</div>" t "Quickly apply between 3 shades of orange to the Backdrop" -STARTLINE T "import colorsys\nn=nuke.thisNode()\ndef clamp(x):\n    return int(max(0, min(x, 255)))\ntile_color=n\['tile_color'].value()\ncolors=\[\[0.11, 0.45, 0.33], \[0.11, 0.3, 0.44], \[0.11, 0.54, 0.61]]\n#converting colors\ncolors_hex=\[colorsys.hsv_to_rgb(color\[0],color\[1],color\[2]) for color in colors]\ncolors_int=\[int('%02x%02x%02x%02x' % (clamp(color\[0]*255),clamp(color\[1]*255),clamp(color\[2]*255),255), 16) for color in colors_hex]\n#selecting color logic\nif tile_color in colors_int:\n    current_index=colors_int.index(tile_color)\n    if current_index >= (len(colors_int)-1):\n        new_color = colors_int\[0]\n    else:\n        new_color = colors_int\[current_index+1]\nelse:\n    new_color = colors_int\[0]\n#apply color\nn\['tile_color'].setValue(new_color)"}
 addUserKnob {22 Yellow l "<div style=\"background-color: #54522e; color: #54522e; font-size: 7px;\">______</div><div style=\"background-color: #706e4e; color: #706e4e; font-size: 7px;\">______</div><div style=\"background-color: #9b9847; color: #9b9847; font-size: 7px;\">______</div>" t "Quickly apply between 3 shades of yellow to the Backdrop" -STARTLINE T "import colorsys\nn=nuke.thisNode()\ndef clamp(x):\n    return int(max(0, min(x, 255)))\ntile_color=n\['tile_color'].value()\ncolors=\[\[0.16, 0.45, 0.33], \[0.16, 0.3, 0.44], \[0.16, 0.54, 0.61]]\n#converting colors\ncolors_hex=\[colorsys.hsv_to_rgb(color\[0],color\[1],color\[2]) for color in colors]\ncolors_int=\[int('%02x%02x%02x%02x' % (clamp(color\[0]*255),clamp(color\[1]*255),clamp(color\[2]*255),255), 16) for color in colors_hex]\n#selecting color logic\nif tile_color in colors_int:\n    current_index=colors_int.index(tile_color)\n    if current_index >= (len(colors_int)-1):\n        new_color = colors_int\[0]\n    else:\n        new_color = colors_int\[current_index+1]\nelse:\n    new_color = colors_int\[0]\n#apply color\nn\['tile_color'].setValue(new_color)"}
 addUserKnob {22 Green l "<div style=\"background-color: #31542e; color: #31542e; font-size: 7px;\">______</div><div style=\"background-color: #51704e; color: #51704e; font-size: 7px;\">______</div><div style=\"background-color: #4e9b47; color: #4e9b47; font-size: 7px;\">______</div>" t "Quickly apply between 3 shades of green to the Backdrop" -STARTLINE T "import colorsys\nn=nuke.thisNode()\ndef clamp(x):\n    return int(max(0, min(x, 255)))\ntile_color=n\['tile_color'].value()\ncolors=\[\[0.32, 0.45, 0.33], \[0.32, 0.3, 0.44], \[0.32, 0.54, 0.61]]\n#converting colors\ncolors_hex=\[colorsys.hsv_to_rgb(color\[0],color\[1],color\[2]) for color in colors]\ncolors_int=\[int('%02x%02x%02x%02x' % (clamp(color\[0]*255),clamp(color\[1]*255),clamp(color\[2]*255),255), 16) for color in colors_hex]\n#selecting color logic\nif tile_color in colors_int:\n    current_index=colors_int.index(tile_color)\n    if current_index >= (len(colors_int)-1):\n        new_color = colors_int\[0]\n    else:\n        new_color = colors_int\[current_index+1]\nelse:\n    new_color = colors_int\[0]\n#apply color\nn\['tile_color'].setValue(new_color)"}
 addUserKnob {22 Cyan l "<div style=\"background-color: #2e5451; color: #2e5451; font-size: 7px;\">______</div><div style=\"background-color: #4e706e; color: #4e706e; font-size: 7px;\">______</div><div style=\"background-color: #479b96; color: #479b96; font-size: 7px;\">______</div>" t "Quickly apply between 3 shades of cyan to the Backdrop" -STARTLINE T "import colorsys\nn=nuke.thisNode()\ndef clamp(x):\n    return int(max(0, min(x, 255)))\ntile_color=n\['tile_color'].value()\ncolors=\[\[0.49, 0.45, 0.33], \[0.49, 0.3, 0.44], \[0.49, 0.54, 0.61]]\n#converting colors\ncolors_hex=\[colorsys.hsv_to_rgb(color\[0],color\[1],color\[2]) for color in colors]\ncolors_int=\[int('%02x%02x%02x%02x' % (clamp(color\[0]*255),clamp(color\[1]*255),clamp(color\[2]*255),255), 16) for color in colors_hex]\n#selecting color logic\nif tile_color in colors_int:\n    current_index=colors_int.index(tile_color)\n    if current_index >= (len(colors_int)-1):\n        new_color = colors_int\[0]\n    else:\n        new_color = colors_int\[current_index+1]\nelse:\n    new_color = colors_int\[0]\n#apply color\nn\['tile_color'].setValue(new_color)"}
 addUserKnob {22 Blue l "<div style=\"background-color: #2e4854; color: #2e4854; font-size: 7px;\">______</div><div style=\"background-color: #4e6670; color: #4e6670; font-size: 7px;\">______</div><div style=\"background-color: #47829b; color: #47829b; font-size: 7px;\">______</div>" t "Quickly apply between 3 shades of blue to the Backdrop" -STARTLINE T "import colorsys\nn=nuke.thisNode()\ndef clamp(x):\n    return int(max(0, min(x, 255)))\ntile_color=n\['tile_color'].value()\ncolors=\[\[0.55, 0.45, 0.33], \[0.55, 0.3, 0.44], \[0.55, 0.54, 0.61]]\n#converting colors\ncolors_hex=\[colorsys.hsv_to_rgb(color\[0],color\[1],color\[2]) for color in colors]\ncolors_int=\[int('%02x%02x%02x%02x' % (clamp(color\[0]*255),clamp(color\[1]*255),clamp(color\[2]*255),255), 16) for color in colors_hex]\n#selecting color logic\nif tile_color in colors_int:\n    current_index=colors_int.index(tile_color)\n    if current_index >= (len(colors_int)-1):\n        new_color = colors_int\[0]\n    else:\n        new_color = colors_int\[current_index+1]\nelse:\n    new_color = colors_int\[0]\n#apply color\nn\['tile_color'].setValue(new_color)"}
 addUserKnob {22 Dark_blue l "<div style=\"background-color: #3a2e54; color: #3a2e54; font-size: 7px;\">______</div><div style=\"background-color: #4e4f70; color: #4e4f70; font-size: 7px;\">______</div><div style=\"background-color: #474a9b; color: #474a9b; font-size: 7px;\">______</div>" t "Quickly apply between 3 shades of dark_blue to the Backdrop" -STARTLINE T "import colorsys\nn=nuke.thisNode()\ndef clamp(x):\n    return int(max(0, min(x, 255)))\ntile_color=n\['tile_color'].value()\ncolors=\[\[0.72, 0.45, 0.33], \[0.66, 0.3, 0.44], \[0.66, 0.54, 0.61]]\n#converting colors\ncolors_hex=\[colorsys.hsv_to_rgb(color\[0],color\[1],color\[2]) for color in colors]\ncolors_int=\[int('%02x%02x%02x%02x' % (clamp(color\[0]*255),clamp(color\[1]*255),clamp(color\[2]*255),255), 16) for color in colors_hex]\n#selecting color logic\nif tile_color in colors_int:\n    current_index=colors_int.index(tile_color)\n    if current_index >= (len(colors_int)-1):\n        new_color = colors_int\[0]\n    else:\n        new_color = colors_int\[current_index+1]\nelse:\n    new_color = colors_int\[0]\n#apply color\nn\['tile_color'].setValue(new_color)"}
 addUserKnob {22 Magenta l "<div style=\"background-color: #4a2e54; color: #4a2e54; font-size: 7px;\">______</div><div style=\"background-color: #674e70; color: #674e70; font-size: 7px;\">______</div><div style=\"background-color: #85479b; color: #85479b; font-size: 7px;\">______</div>" t "Quickly apply between 3 shades of magenta to the Backdrop" -STARTLINE T "import colorsys\nn=nuke.thisNode()\ndef clamp(x):\n    return int(max(0, min(x, 255)))\ntile_color=n\['tile_color'].value()\ncolors=\[\[0.79, 0.45, 0.33], \[0.79, 0.3, 0.44], \[0.79, 0.54, 0.61]]\n#converting colors\ncolors_hex=\[colorsys.hsv_to_rgb(color\[0],color\[1],color\[2]) for color in colors]\ncolors_int=\[int('%02x%02x%02x%02x' % (clamp(color\[0]*255),clamp(color\[1]*255),clamp(color\[2]*255),255), 16) for color in colors_hex]\n#selecting color logic\nif tile_color in colors_int:\n    current_index=colors_int.index(tile_color)\n    if current_index >= (len(colors_int)-1):\n        new_color = colors_int\[0]\n    else:\n        new_color = colors_int\[current_index+1]\nelse:\n    new_color = colors_int\[0]\n#apply color\nn\['tile_color'].setValue(new_color)"}
 addUserKnob {22 Pink l "<div style=\"background-color: #542e49; color: #542e49; font-size: 7px;\">______</div><div style=\"background-color: #704e66; color: #704e66; font-size: 7px;\">______</div><div style=\"background-color: #9b4784; color: #9b4784; font-size: 7px;\">______</div>" t "Quickly apply between 3 shades of pink to the Backdrop" -STARTLINE T "import colorsys\nn=nuke.thisNode()\ndef clamp(x):\n    return int(max(0, min(x, 255)))\ntile_color=n\['tile_color'].value()\ncolors=\[\[0.88, 0.45, 0.33], \[0.88, 0.3, 0.44], \[0.88, 0.54, 0.61]]\n#converting colors\ncolors_hex=\[colorsys.hsv_to_rgb(color\[0],color\[1],color\[2]) for color in colors]\ncolors_int=\[int('%02x%02x%02x%02x' % (clamp(color\[0]*255),clamp(color\[1]*255),clamp(color\[2]*255),255), 16) for color in colors_hex]\n#selecting color logic\nif tile_color in colors_int:\n    current_index=colors_int.index(tile_color)\n    if current_index >= (len(colors_int)-1):\n        new_color = colors_int\[0]\n    else:\n        new_color = colors_int\[current_index+1]\nelse:\n    new_color = colors_int\[0]\n#apply color\nn\['tile_color'].setValue(new_color)"}
 addUserKnob {26 space l " " T " "}
 addUserKnob {22 Input l "<div style=\"background-color: #999999; color: #999999; font-size: 7px;\">______</div><div style=\"background-color: #999999; color: #999999; font-size: 7px;\">______</div><div style=\"background-color: #999999; color: #999999; font-size: 7px;\">______</div><div>Input</div>" t "Quickly apply a Backdrop for Cam" -STARTLINE T "import colorsys\nn=nuke.thisNode()\ndef clamp(x):\n    return int(max(0, min(x, 255)))\ntile_color=n\['tile_color'].value()\ncolors=\[\[0.0, 0.0, 0.6], \[0.0, 0.0, 0.6], \[0.0, 0.0, 0.6]]\n#converting colors\ncolors_hex=\[colorsys.hsv_to_rgb(color\[0],color\[1],color\[2]) for color in colors]\ncolors_int=\[int('%02x%02x%02x%02x' % (clamp(color\[0]*255),clamp(color\[1]*255),clamp(color\[2]*255),255), 16) for color in colors_hex]\n#selecting color logic\nif tile_color in colors_int:\n    current_index=colors_int.index(tile_color)\n    if current_index >= (len(colors_int)-1):\n        new_color = colors_int\[0]\n    else:\n        new_color = colors_int\[current_index+1]\nelse:\n    new_color = colors_int\[0]\n#apply color\nn\['tile_color'].setValue(new_color)"}
 addUserKnob {22 Aovs l "<div style=\"background-color: #666666; color: #666666; font-size: 7px;\">______</div><div style=\"background-color: #666666; color: #666666; font-size: 7px;\">______</div><div style=\"background-color: #666666; color: #666666; font-size: 7px;\">______</div><div>Aovs</div>" t "Quickly apply a Backdrop for Elements" -STARTLINE T "import colorsys\nn=nuke.thisNode()\ndef clamp(x):\n    return int(max(0, min(x, 255)))\ntile_color=n\['tile_color'].value()\ncolors=\[\[0.0, 0.0, 0.4], \[0.0, 0.0, 0.4], \[0.0, 0.0, 0.4]]\n#converting colors\ncolors_hex=\[colorsys.hsv_to_rgb(color\[0],color\[1],color\[2]) for color in colors]\ncolors_int=\[int('%02x%02x%02x%02x' % (clamp(color\[0]*255),clamp(color\[1]*255),clamp(color\[2]*255),255), 16) for color in colors_hex]\n#selecting color logic\nif tile_color in colors_int:\n    current_index=colors_int.index(tile_color)\n    if current_index >= (len(colors_int)-1):\n        new_color = colors_int\[0]\n    else:\n        new_color = colors_int\[current_index+1]\nelse:\n    new_color = colors_int\[0]\n#apply color\nn\['tile_color'].setValue(new_color)"}
 addUserKnob {22 Matt l "<div style=\"background-color: #767f75; color: #767f75; font-size: 7px;\">______</div><div style=\"background-color: #767f75; color: #767f75; font-size: 7px;\">______</div><div style=\"background-color: #767f75; color: #767f75; font-size: 7px;\">______</div><div>Matt</div>" t "Quickly apply a Backdrop for Key" -STARTLINE T "import colorsys\nn=nuke.thisNode()\ndef clamp(x):\n    return int(max(0, min(x, 255)))\ntile_color=n\['tile_color'].value()\ncolors=\[\[0.32, 0.08, 0.5], \[0.32, 0.08, 0.5], \[0.32, 0.08, 0.5]]\n#converting colors\ncolors_hex=\[colorsys.hsv_to_rgb(color\[0],color\[1],color\[2]) for color in colors]\ncolors_int=\[int('%02x%02x%02x%02x' % (clamp(color\[0]*255),clamp(color\[1]*255),clamp(color\[2]*255),255), 16) for color in colors_hex]\n#selecting color logic\nif tile_color in colors_int:\n    current_index=colors_int.index(tile_color)\n    if current_index >= (len(colors_int)-1):\n        new_color = colors_int\[0]\n    else:\n        new_color = colors_int\[current_index+1]\nelse:\n    new_color = colors_int\[0]\n#apply color\nn\['tile_color'].setValue(new_color)"}
 addUserKnob {22 Crypt l "<div style=\"background-color: #34662f; color: #34662f; font-size: 7px;\">______</div><div style=\"background-color: #34662f; color: #34662f; font-size: 7px;\">______</div><div style=\"background-color: #34662f; color: #34662f; font-size: 7px;\">______</div><div>Crypt</div>" t "Quickly apply a Backdrop for Cleanup" -STARTLINE T "import colorsys\nn=nuke.thisNode()\ndef clamp(x):\n    return int(max(0, min(x, 255)))\ntile_color=n\['tile_color'].value()\ncolors=\[\[0.32, 0.53, 0.4], \[0.32, 0.53, 0.4], \[0.32, 0.53, 0.4]]\n#converting colors\ncolors_hex=\[colorsys.hsv_to_rgb(color\[0],color\[1],color\[2]) for color in colors]\ncolors_int=\[int('%02x%02x%02x%02x' % (clamp(color\[0]*255),clamp(color\[1]*255),clamp(color\[2]*255),255), 16) for color in colors_hex]\n#selecting color logic\nif tile_color in colors_int:\n    current_index=colors_int.index(tile_color)\n    if current_index >= (len(colors_int)-1):\n        new_color = colors_int\[0]\n    else:\n        new_color = colors_int\[current_index+1]\nelse:\n    new_color = colors_int\[0]\n#apply color\nn\['tile_color'].setValue(new_color)"}
 addUserKnob {22 Refe l "<div style=\"background-color: #273c56; color: #273c56; font-size: 7px;\">______</div><div style=\"background-color: #273c56; color: #273c56; font-size: 7px;\">______</div><div style=\"background-color: #273c56; color: #273c56; font-size: 7px;\">______</div>" t "Quickly apply a Backdrop for Ref" -STARTLINE T "import colorsys\nn=nuke.thisNode()\ndef clamp(x):\n    return int(max(0, min(x, 255)))\ntile_color=n\['tile_color'].value()\ncolors=\[\[0.59, 0.55, 0.34], \[0.59, 0.55, 0.34], \[0.59, 0.55, 0.34]]\n#converting colors\ncolors_hex=\[colorsys.hsv_to_rgb(color\[0],color\[1],color\[2]) for color in colors]\ncolors_int=\[int('%02x%02x%02x%02x' % (clamp(color\[0]*255),clamp(color\[1]*255),clamp(color\[2]*255),255), 16) for color in colors_hex]\n#selecting color logic\nif tile_color in colors_int:\n    current_index=colors_int.index(tile_color)\n    if current_index >= (len(colors_int)-1):\n        new_color = colors_int\[0]\n    else:\n        new_color = colors_int\[current_index+1]\nelse:\n    new_color = colors_int\[0]\n#apply color\nn\['tile_color'].setValue(new_color)"}
 addUserKnob {22 Otro l "<div style=\"background-color: #465177; color: #465177; font-size: 7px;\">______</div><div style=\"background-color: #465177; color: #465177; font-size: 7px;\">______</div><div style=\"background-color: #465177; color: #465177; font-size: 7px;\">______</div>" t "Quickly apply a Backdrop for Pub" -STARTLINE T "import colorsys\nn=nuke.thisNode()\ndef clamp(x):\n    return int(max(0, min(x, 255)))\ntile_color=n\['tile_color'].value()\ncolors=\[\[0.63, 0.41, 0.47], \[0.63, 0.41, 0.47], \[0.63, 0.41, 0.47]]\n#converting colors\ncolors_hex=\[colorsys.hsv_to_rgb(color\[0],color\[1],color\[2]) for color in colors]\ncolors_int=\[int('%02x%02x%02x%02x' % (clamp(color\[0]*255),clamp(color\[1]*255),clamp(color\[2]*255),255), 16) for color in colors_hex]\n#selecting color logic\nif tile_color in colors_int:\n    current_index=colors_int.index(tile_color)\n    if current_index >= (len(colors_int)-1):\n        new_color = colors_int\[0]\n    else:\n        new_color = colors_int\[current_index+1]\nelse:\n    new_color = colors_int\[0]\n#apply color\nn\['tile_color'].setValue(new_color)"}
 addUserKnob {26 S08 l " " T " "}
 addUserKnob {22 copy_color l "   Copy Color   " -STARTLINE T "\nimport subprocess\nimport platform\n\nnode = nuke.thisNode()\n\ntile_color = node\['tile_color'].value()\ntile_color_hex = '\{:08x\}'.format(tile_color)  # Convertir a cadena hexadecimal de 8 d√≠gitos\n\n# Copiar al portapapeles seg√∫n el sistema operativo\nif platform.system() == 'Windows':\n    cmd = 'echo ' + tile_color_hex + '| clip'\n    subprocess.run(cmd, shell=True)\nelif platform.system() == 'Darwin':\n    cmd = 'echo ' + tile_color_hex + ' | pbcopy'\n    subprocess.run(cmd, shell=True)\nelse:\n    print(\"Sistema operativo no soportado para copiar al portapapeles\")\n\n#print(\"Color copiado al portapapeles:\", tile_color_hex)\n"}
 addUserKnob {22 paste_color l "   Paste Color   " -STARTLINE T "\nimport subprocess\nimport platform\n\nnode = nuke.thisNode()\n\n# Obtener el valor del portapapeles seg√∫n el sistema operativo\nif platform.system() == 'Windows':\n    cmd = 'powershell Get-Clipboard'\n    result = subprocess.run(cmd, shell=True, capture_output=True, text=True)\n    tile_color_hex = result.stdout.strip()\nelif platform.system() == 'Darwin':\n    cmd = 'pbpaste'\n    result = subprocess.run(cmd, shell=True, capture_output=True, text=True)\n    tile_color_hex = result.stdout.strip()\nelse:\n    print(\"Sistema operativo no soportado para pegar desde el portapapeles\")\n    tile_color_hex = None\n\nif tile_color_hex:\n    try:\n        tile_color = int(tile_color_hex, 16)\n        node\['tile_color'].setValue(tile_color)\n        #print(\"Color pegado desde el portapapeles:\", tile_color_hex)\n    except ValueError:\n        print(\"El valor en el portapapeles no es un color v√°lido\")\n"}
 addUserKnob {26 S07 l " " T " "}
 addUserKnob {4 oz_appearance l " Appearance      " -STARTLINE M {Fill Border}}
 addUserKnob {26 S08 l " " -STARTLINE T "       "}
 addUserKnob {7 "" l Border t "Border width for Border appearence" -STARTLINE R 0 10}
 addUserKnob {26 divider2 l "" +STARTLINE}
 addUserKnob {26 S02 l " " T " "}
 addUserKnob {22 grow l " <img src=\"MergeMin.png\">" t "Grows the size of the Backdrop by 50pt in every direction" -STARTLINE T "n=nuke.thisNode()\n\ndef grow(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()-step)\n            n\['ypos'].setValue(n\['ypos'].getValue()-step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()+step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()+step*2)\n    except e:\n        print('Error:: %s' % e)\n\ngrow(n,50)"}
 addUserKnob {22 shrink l " <img src=\"MergeMax.png\">" t "Shrinks the size of the Backdrop by 50pt in every direction" -STARTLINE T "n=nuke.thisNode()\n\ndef shrink(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()+step)\n            n\['ypos'].setValue(n\['ypos'].getValue()+step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()-step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()-step*2)\n    except e:\n        print('Error:: %s' % e)\n\nshrink(n,50)"}
 addUserKnob {26 S03 l " " -STARTLINE T "     "}
 addUserKnob {22 encompassSelectedNodes l " <img src=\"ContactSheet.png\">" t "Will resize the backdrop to encompass every selected nodes plus a padding number (the number next to the button)" -STARTLINE T "this = nuke.thisNode()\npadding = this\['sides'].getValue()\nif this.isSelected:\n    this.setSelected(False)\nselNodes = nuke.selectedNodes()\n        \ndef nodeIsInside (node, backdropNode):\n    # Returns true if node geometry is inside backdropNode otherwise returns false\n    topLeftNode = \[node.xpos(), node.ypos()]\n    topLeftBackDrop = \[backdropNode.xpos(), backdropNode.ypos()]\n    bottomRightNode = \[node.xpos() + node.screenWidth(), node.ypos() + node.screenHeight()]\n    bottomRightBackdrop = \[backdropNode.xpos() + backdropNode.screenWidth(), backdropNode.ypos() + backdropNode.screenHeight()]\n                    \n    topLeft = ( topLeftNode\[0] >= topLeftBackDrop\[0] ) and ( topLeftNode\[1] >= topLeftBackDrop\[1] )\n    bottomRight = ( bottomRightNode\[0] <= bottomRightBackdrop\[0] ) and ( bottomRightNode\[1] <= bottomRightBackdrop\[1] )\n                    \n    return topLeft and bottomRight\n\nif not selNodes:\n    nuke.message('Some nodes should be selected')\nelse:\n    # Calculate bounds for the backdrop node.\n    bdX = min(\[node.xpos() for node in selNodes])\n    bdY = min(\[node.ypos() for node in selNodes])\n    bdW = max(\[node.xpos() + node.screenWidth() for node in selNodes]) - bdX\n    bdH = max(\[node.ypos() + node.screenHeight() for node in selNodes]) - bdY\n                        \n    zOrder = 0\n    selectedBackdropNodes = nuke.selectedNodes( \"BackdropNode\" )\n\n    #if there are backdropNodes selected put the new one immediately behind the farthest one\n                \n    if len( selectedBackdropNodes ):\n        zOrder = min( \[node.knob( \"z_order\" ).value() for node in selectedBackdropNodes] ) - 1\n    else :\n        #otherwise (no backdrop in selection) find the nearest backdrop if exists and set the new one in front of it\n        nonSelectedBackdropNodes = nuke.allNodes(\"BackdropNode\")\n        for nonBackdrop in selNodes:\n            for backdrop in nonSelectedBackdropNodes:\n                if nodeIsInside( nonBackdrop, backdrop ):\n                    zOrder = max( zOrder, backdrop.knob( \"z_order\" ).value() + 1 )\n    \n    # Expand the bounds to leave a little border. Elements are offsets for left, top, right and bottom edges respectively\n    left, top, right, bottom = (-padding, -(padding+70), padding, padding)\n    bdX += left\n    bdY += top\n    bdW += (right - left)\n    bdH += (bottom - top)\n\n    this\['xpos'].setValue(bdX)\n    this\['bdwidth'].setValue(bdW)\n    this\['ypos'].setValue(bdY)\n    this\['bdheight'].setValue(bdH)\n    this\['z_order'].setValue(zOrder)\n"}
 addUserKnob {26 S04 l " " -STARTLINE T " "}
 addUserKnob {3 sides l "" t "When encompassing nodes this number of pt will be added to the Backdrop size in every direction" -STARTLINE}
 sides 50
 addUserKnob {26 divider3 l "" +STARTLINE}
 addUserKnob {26 S05 l " " -STARTLINE T " "}
 addUserKnob {26 pos_text l Position -STARTLINE T " "}
 addUserKnob {3 node_position_x l x -STARTLINE}
 addUserKnob {3 node_position_y l y -STARTLINE}
 addUserKnob {26 S06 l " " T " "}
 addUserKnob {14 sizeNode l "Size       " -STARTLINE R 0 100}
 sizeNode {0 0}
 addUserKnob {26 S09 l " " T " "}
 addUserKnob {22 "Copy Width" l "Copy W" t "Copy the width of this backdrop to use in another backdrop" -STARTLINE T "\nimport subprocess\nimport platform\n\nnode = nuke.thisNode()\n\n# Llamar a la funci√≥n updateKnobs para actualizar todos los valores\ndef updateKnobs(node):\n    nodeWidth = node\['bdwidth'].getValue()\n    nodeHeight = node\['bdheight'].getValue()\n    node\['sizeNode'].setValue(\[int(nodeWidth), int(nodeHeight)])\n    node\['zorder'].setValue(int(node\['z_order'].getValue()))\n    node\['font_size'].setValue(int(node\['note_font_size'].getValue()))\n    node\['oz_appearance'].setValue(node\['appearance'].value())\n    node\['oz_border_width'].setValue(node\['border_width'].value())\n\nupdateKnobs(node)\n\nsize_w = node\['sizeNode'].getValue()\[0]\n\n# Copiar al portapapeles seg√∫n el sistema operativo\nif platform.system() == 'Windows':\n    cmd = 'echo ' + str(size_w).strip() + '| clip'\n    subprocess.run(cmd, shell=True)\nelif platform.system() == 'Darwin':\n    cmd = 'echo ' + str(size_w).strip() + ' | pbcopy'\n    subprocess.run(cmd, shell=True)\nelse:\n    print(\"Sistema operativo no soportado para copiar al portapapeles\")\n\n#print(\"Size W copiado al portapapeles:\", size_w)\n"}
 addUserKnob {22 "Paste Width" l "Paste W" t "Set this backdrop's width using the value copied from another backdrop" -STARTLINE T "\nimport subprocess\nimport platform\n\nnode = nuke.thisNode()\n\n# Obtener el valor del portapapeles seg√∫n el sistema operativo\nif platform.system() == 'Windows':\n    cmd = 'powershell Get-Clipboard'\n    result = subprocess.run(cmd, shell=True, capture_output=True, text=True)\n    size_w = result.stdout.strip()\nelif platform.system() == 'Darwin':\n    cmd = 'pbpaste'\n    result = subprocess.run(cmd, shell=True, capture_output=True, text=True)\n    size_w = result.stdout.strip()\nelse:\n    print(\"Sistema operativo no soportado para pegar desde el portapapeles\")\n    size_w = None\n\nif size_w:\n    try:\n        size_w = float(size_w)\n        node\['bdwidth'].setValue(size_w)\n        node\['sizeNode'].setValue(\[size_w, node\['sizeNode'].getValue()\[1]])\n        #print(\"Size W pegado desde el portapapeles:\", size_w)\n    except ValueError:\n        print(\"El valor en el portapapeles no es un n√∫mero v√°lido\")\n"}
 addUserKnob {22 "Copy Height" l "Copy H" t "Copy the height of this backdrop to use in another backdrop" -STARTLINE T "\nimport subprocess\nimport platform\n\nnode = nuke.thisNode()\n\n# Llamar a la funci√≥n updateKnobs para actualizar todos los valores\ndef updateKnobs(node):\n    nodeWidth = node\['bdwidth'].getValue()\n    nodeHeight = node\['bdheight'].getValue()\n    node\['sizeNode'].setValue(\[int(nodeWidth), int(nodeHeight)])\n    node\['zorder'].setValue(int(node\['z_order'].getValue()))\n    node\['font_size'].setValue(int(node\['note_font_size'].getValue()))\n    node\['oz_appearance'].setValue(node\['appearance'].value())\n    node\['oz_border_width'].setValue(node\['border_width'].value())\n\nupdateKnobs(node)\n\nsize_h = node\['sizeNode'].getValue()\[1]\n\n# Copiar al portapapeles seg√∫n el sistema operativo\nif platform.system() == 'Windows':\n    cmd = 'echo ' + str(size_h).strip() + '| clip'\n    subprocess.run(cmd, shell=True)\nelif platform.system() == 'Darwin':\n    cmd = 'echo ' + str(size_h).strip() + ' | pbcopy'\n    subprocess.run(cmd, shell=True)\nelse:\n    print(\"Sistema operativo no soportado para copiar al portapapeles\")\n\n#print(\"Size H copiado al portapapeles:\", size_h)\n"}
 addUserKnob {22 "Paste Height" l "Paste H" t "Set this backdrop's height using the value copied from another backdrop" -STARTLINE T "\nimport subprocess\nimport platform\n\nnode = nuke.thisNode()\n\n# Obtener el valor del portapapeles seg√∫n el sistema operativo\nif platform.system() == 'Windows':\n    cmd = 'powershell Get-Clipboard'\n    result = subprocess.run(cmd, shell=True, capture_output=True, text=True)\n    size_h = result.stdout.strip()\nelif platform.system() == 'Darwin':\n    cmd = 'pbpaste'\n    result = subprocess.run(cmd, shell=True, capture_output=True, text=True)\n    size_h = result.stdout.strip()\nelse:\n    print(\"Sistema operativo no soportado para pegar desde el portapapeles\")\n    size_h = None\n\nif size_h:\n    try:\n        size_h = float(size_h)\n        node\['bdheight'].setValue(size_h)\n        node\['sizeNode'].setValue(\[node\['sizeNode'].getValue()\[0], size_h])\n        #print(\"Size H pegado desde el portapapeles:\", size_h)\n    except ValueError:\n        print(\"El valor en el portapapeles no es un n√∫mero v√°lido\")\n"}
 addUserKnob {26 divider4 l "" +STARTLINE}
 addUserKnob {26 "Z Order" l "" -STARTLINE T "Z Order     "}
 addUserKnob {26 "" -STARTLINE T "Back "}
 addUserKnob {7 zorder l "" -STARTLINE R -5 5}
 addUserKnob {26 "" -STARTLINE T " Front"}
}
