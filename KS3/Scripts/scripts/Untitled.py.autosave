# Version que descarga todas las versiones y notas asociadas a las tareas asignadas al usuario
# v03: solo muestra las que tuvieron cambios desde una fecha determinada

import os
import shotgun_api3

# Recuperar datos de autenticacion de las variables de entorno
url = os.environ.get("SHOTGRID_URL")
login = os.environ.get("SHOTGRID_LOGIN")
password = os.environ.get("SHOTGRID_PASSWORD")

# Crear una instancia de la API de ShotGrid usando login y password
sg = shotgun_api3.Shotgun(url, login=login, password=password)

def get_assigned_tasks(sg, user_login, min_date=None):
    filters = [
        ['task_assignees.HumanUser.login', 'is', user_login],
        ['sg_status_list', 'is_not', 'fin']
    ]
    
    # Añadir filtros de fecha si se especifica una fecha mínima
    if min_date:
        date_filter = {
            'filter_operator': 'any',
            'filters': [
                ['created_at', 'greater_than', min_date],
                ['updated_at', 'greater_than', min_date]
            ]
        }
        filters.append(date_filter)
    
    # Añadir campos para versiones y notas
    fields = [
        'id', 
        'content', 
        'sg_description', 
        'sg_status_list', 
        'entity', 
        'entity.Shot.code', 
        'entity.Shot.description',
        'entity.Shot.sg_status_list',
        'project.Project.name',
        'project.Project.sg_status',
        'versions',  # Versiones asociadas a la tarea
        'notes'  # Notas asociadas a la tarea
    ]
    return sg.find("Task", filters, fields)

def find_latest_version_for_shot(sg, shot_id):
    # Buscar la última versión asociada al shot
    filters = [
        ['entity', 'is', {'type': 'Shot', 'id': shot_id}]
    ]
    fields = ['id', 'code', 'sg_status_list', 'description', 'created_at', 'user']
    # Ordenar por fecha de creación descendente y limitar a 1 resultado
    return sg.find_one("Version", filters, fields, [{'field_name': 'created_at', 'direction': 'desc'}])

def print_task_info(task, sg):
    print(f"\nProject: {task.get('project.Project.name', 'No project available')}")
    print(f"Project Status: {task.get('project.Project.sg_status', 'No status available')}")
    print(f"Shot: {task.get('entity.Shot.code', 'No shot available')}")
    print(f"Shot Status: {task.get('entity.Shot.sg_status_list', 'No status available')}")
    print(f"Task: {task['content']}")
    print(f"Task Status: {task['sg_status_list']}")
    print(f"Description: {task.get('entity.Shot.description', 'No description available')}")
    
    # Obtener la última versión asociada al shot
    if task.get('entity'):
        shot_id = task['entity']['id']
        version = find_latest_version_for_shot(sg, shot_id)
        
        if version:
            print("\nÚltima versión:")
            print(f"  - Version SG: {version.get('code', 'No version code')}")
            print(f"    Status: {version.get('sg_status_list', 'No status')}")
            print(f"    Description: {version.get('description', 'No description')}")
            print(f"    Created At: {version.get('created_at', 'No date available')}")
            print(f"    User: {version['user']['name'] if version.get('user') else 'No user available'}")
            
            # Obtener notas de la versión
            notes = sg.find("Note", [['note_links', 'in', {'type': 'Version', 'id': version['id']}]], ['content', 'user'])
            if notes:
                print("    Comments:")
                for note in notes:
                    print(f"      - {note['content']} (User: {note['user']['name']})")
            else:
                print("    No comments found.")
        else:
            print("\nNo se encontraron versiones asociadas en ShotGrid.")
    
    # Generar URL de la tarea usando la base URL de ShotGrid
    task_url = f"{sg.base_url}/detail/Task/{task['id']}"
    print(f"\nTask URL: {task_url}")

def main():
    try:
        # Especificar fecha mínima con formato completo (ejemplo: 1 de marzo de 2025 a las 00:00 UTC)
        min_date = '2025-03-01T00:00:00Z'
        tasks = get_assigned_tasks(sg, login, min_date)
        
        if tasks:
            print(f"\nTareas asignadas:")
            for task in tasks:
                print_task_info(task, sg)
        else:
            print("No se encontraron tareas asignadas")
            
    except Exception as e:
        print(f"Error al obtener tareas: {e}")

if __name__ == "__main__":
    main()
