'''
LGA_StickyNote.py - Script simple para mostrar un diálogo de entrada de texto
'''

import nuke
from PySide2 import QtWidgets, QtGui, QtCore


class StickyNote(QtWidgets.QDialog):
    def __init__(self):
        super(StickyNote, self).__init__()
        
        self.text_edit = QtWidgets.QTextEdit()
        self.text_edit.setAlignment(QtCore.Qt.AlignCenter)
        self.title = QtWidgets.QLabel("<b>StickyNote</b>")
        self.title.setAlignment(QtCore.Qt.AlignCenter)
        self.title.setStyleSheet("color: #AAAAAA;")

        self.help = QtWidgets.QLabel('<span style="font-size:7pt; color:#AAAAAA;">Ctrl+Enter para confirmar</span>')
        self.help.setAlignment(QtCore.Qt.AlignCenter)

        self.layout = QtWidgets.QVBoxLayout()
        self.layout.addWidget(self.title)
        self.layout.addWidget(self.text_edit)
        self.layout.addWidget(self.help)
        self.setLayout(self.layout)
        self.resize(200, 150)
        self.setStyleSheet("background-color: #242527;")
        self.setWindowFlags(QtCore.Qt.FramelessWindowHint | QtCore.Qt.WindowStaysOnTopHint)

        self.text_edit.installEventFilter(self)
        
    def eventFilter(self, widget, event):
        if isinstance(event, QtGui.QKeyEvent):
            if event.key() == QtCore.Qt.Key_Return and event.modifiers() == QtCore.Qt.ControlModifier:
                print("Texto ingresado:", self.text_edit.toPlainText())
                self.close()
                return True
            elif event.key() == QtCore.Qt.Key_Escape:
                print("Se presionó ESC para salir")
                self.close()
                return True
        return False
    
    def showEvent(self, event):
        """Se llama cuando el diálogo se muestra"""
        super().showEvent(event)
        self.activateWindow()  # Activar la ventana
        self.raise_()          # Traer al frente
        self.text_edit.setFocus()  # Dar foco al text_edit

    def run(self):
        # Usar QApplication.primaryScreen() en lugar de QDesktopWidget
        cursor_pos = QtGui.QCursor.pos()
        screen = QtWidgets.QApplication.primaryScreen()
        avail_space = screen.availableGeometry()
        
        posx = min(max(cursor_pos.x()-100, avail_space.left()), avail_space.right()-200)
        posy = min(max(cursor_pos.y()-80, avail_space.top()), avail_space.bottom()-150)
        
        self.move(QtCore.QPoint(posx, posy))
        self.text_edit.clear()
        self.activateWindow()  # Asegurar que la ventana está activa
        self.raise_()          # Traer al frente
        self.text_edit.setFocus()
        self.show()


# Variables globales
app = None
sticky_note = None

def main():
    """Función principal para mostrar el diálogo de StickyNote."""
    global app, sticky_note
    app = QtWidgets.QApplication.instance() or QtWidgets.QApplication([])
    sticky_note = StickyNote()
    sticky_note.run()

# Para uso en Nuke (no crea una nueva QApplication)
def run_sticky_note():
    """Mostrar el StickyNote dentro de Nuke"""
    global sticky_note
    if sticky_note is None:
        sticky_note = StickyNote()
    sticky_note.run()

# Ejecutar cuando se carga en Nuke
run_sticky_note() 