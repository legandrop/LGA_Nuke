"""
Script de exploraci√≥n para entender el comportamiento del viewer de Nuke
cuando no tiene nodos conectados.
"""

import nuke

def explorar_viewer_sin_nodos():
    """
    Explora el comportamiento del viewer cuando no tiene nodos conectados.
    """
    print("=" * 60)
    print("EXPLORANDO VIEWER SIN NODOS CONECTADOS")
    print("=" * 60)
    
    viewer = nuke.activeViewer()
    if not viewer:
        print("‚ùå No hay viewer activo")
        return
    
    view_node = viewer.node()
    print(f"‚úÖ Viewer encontrado: {view_node.name()}")
    
    # Explorar activeInput()
    active_input = viewer.activeInput()
    print(f"üìç activeInput(): {active_input} (tipo: {type(active_input)})")
    
    # Si activeInput() devuelve None, explorar alternativas
    if active_input is None:
        print("üîç activeInput() es None, explorando alternativas...")
        
        # Intentar con diferentes inputs
        for i in range(10):  # Los viewers tienen inputs 0-9
            input_node = view_node.input(i)
            print(f"   Input {i}: {input_node.name() if input_node else 'None'}")
        
        # Explorar propiedades del viewer
        print("\nüîç Explorando propiedades del viewer:")
        try:
            print(f"   view_node.inputs(): {view_node.inputs()}")
        except:
            print("   view_node.inputs(): Error al acceder")
            
        try:
            print(f"   view_node.maxInputs(): {view_node.maxInputs()}")
        except:
            print("   view_node.maxInputs(): Error al acceder")
            
        # Intentar usar input 0 por defecto
        print("\nüí° Intentando usar input 0 por defecto...")
        input_index = 0
        input_node = view_node.input(input_index)
        print(f"   Input 0: {input_node.name() if input_node else 'None'}")
        
        return viewer, view_node, input_index, input_node
    
    else:
        # Si activeInput() devuelve un valor v√°lido
        print(f"‚úÖ activeInput() devolvi√≥: {active_input}")
        input_node = view_node.input(active_input)
        print(f"   Nodo conectado: {input_node.name() if input_node else 'None'}")
        
        return viewer, view_node, active_input, input_node

def explorar_viewer_con_nodos():
    """
    Explora el comportamiento del viewer cuando S√ç tiene nodos conectados.
    """
    print("\n" + "=" * 60)
    print("EXPLORANDO VIEWER CON NODOS CONECTADOS")
    print("=" * 60)
    
    viewer = nuke.activeViewer()
    if not viewer:
        print("‚ùå No hay viewer activo")
        return
    
    view_node = viewer.node()
    print(f"‚úÖ Viewer encontrado: {view_node.name()}")
    
    active_input = viewer.activeInput()
    print(f"üìç activeInput(): {active_input} (tipo: {type(active_input)})")
    
    if active_input is not None:
        input_node = view_node.input(active_input)
        print(f"   Nodo conectado: {input_node.name() if input_node else 'None'}")
    
    # Explorar todos los inputs
    print("\nüîç Explorando todos los inputs:")
    for i in range(10):
        input_node = view_node.input(i)
        print(f"   Input {i}: {input_node.name() if input_node else 'None'}")

def main():
    """
    Funci√≥n principal que ejecuta ambas exploraciones.
    """
    print("üöÄ INICIANDO EXPLORACI√ìN DEL VIEWER DE NUKE")
    
    # Primero explorar el estado actual
    viewer = nuke.activeViewer()
    if viewer:
        view_node = viewer.node()
        active_input = viewer.activeInput()
        
        if active_input is None:
            print("üìã Estado actual: Viewer SIN nodos conectados")
            explorar_viewer_sin_nodos()
        else:
            input_node = view_node.input(active_input)
            if input_node:
                print("üìã Estado actual: Viewer CON nodo conectado")
                explorar_viewer_con_nodos()
            else:
                print("üìã Estado actual: Viewer con activeInput v√°lido pero sin nodo")
                explorar_viewer_sin_nodos()
    else:
        print