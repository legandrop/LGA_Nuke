<?xml version="1.0" encoding="UTF-8"?><script>'''
LGA_StickyNote.py - Script simple para mostrar un diálogo de entrada de texto
'''

import nuke
from PySide2 import QtWidgets, QtGui, QtCore


class StickyNote(QtWidgets.QDialog):
    def __init__(self):
        super(StickyNote, self).__init__()
        
        self.text_edit = QtWidgets.QTextEdit()
        self.text_edit.setAlignment(QtCore.Qt.AlignCenter)
        self.title = QtWidgets.QLabel(&quot;&lt;b&gt;StickyNote&lt;/b&gt;&quot;)
        self.title.setAlignment(QtCore.Qt.AlignCenter)
        self.title.setStyleSheet(&quot;color: #AAAAAA;&quot;)

        self.help = QtWidgets.QLabel('&lt;span style=&quot;font-size:7pt; color:#AAAAAA;&quot;&gt;Ctrl+Enter para confirmar&lt;/span&gt;')
        self.help.setAlignment(QtCore.Qt.AlignCenter)

        self.layout = QtWidgets.QVBoxLayout()
        self.layout.addWidget(self.title)
        self.layout.addWidget(self.text_edit)
        self.layout.addWidget(self.help)
        self.setLayout(self.layout)
        self.resize(200, 150)
        self.setStyleSheet(&quot;background-color: #242527;&quot;)
        self.setWindowFlags(QtCore.Qt.FramelessWindowHint | QtCore.Qt.WindowStaysOnTopHint)

        self.text_edit.installEventFilter(self)
        
    def eventFilter(self, widget, event):
        if isinstance(event, QtGui.QKeyEvent):
            if event.key() == QtCore.Qt.Key_Return and event.modifiers() == QtCore.Qt.ControlModifier:
                print(&quot;Texto ingresado:&quot;, self.text_edit.toPlainText())
                self.close()
                return True
            elif event.key() == QtCore.Qt.Key_Escape:
                print(&quot;Se presionó ESC para salir&quot;)
                self.close()
                return True
        return False
    
    def showEvent(self, event):
        &quot;&quot;&quot;Se llama cuando el diálogo se muestra&quot;&quot;&quot;
        super().showEvent(event)
        self.activateWindow()  # Activar la ventana
        self.raise_()          # Traer al frente
        self.text_edit.setFocus()  # Dar foco al text_edit

    def run(self):
        # Usar QApplication.primaryScreen() en lugar de QDesktopWidget
        cursor_pos = QtGui.QCursor.pos()
        screen = QtWidgets.QApplication.primaryScreen()
        avail_space = screen.availableGeometry()
        
        posx = min(max(cursor_pos.x()-100, avail_space.left()), avail_space.right()-200)
        posy = min(max(cursor_pos.y()-80, avail_space.top()), avail_space.bottom()-150)
        
        self.move(QtCore.QPoint(posx, posy))
        self.text_edit.clear()
        self.activateWindow()  # Asegurar que la ventana está activa
        self.raise_()          # Traer al frente
        self.text_edit.setFocus()
        self.show()


# Variables globales
app = None
sticky_note = None

def main():
    &quot;&quot;&quot;Función principal para mostrar el diálogo de StickyNote.&quot;&quot;&quot;
    global app, sticky_note
    app = QtWidgets.QApplication.instance() or QtWidgets.QApplication([])
    sticky_note = StickyNote()
    sticky_note.run()

# Para uso en Nuke (no crea una nueva QApplication)
def run_sticky_note():
    &quot;&quot;&quot;Mostrar el StickyNote dentro de Nuke&quot;&quot;&quot;
    global sticky_note
    if sticky_note is None:
        sticky_note = StickyNote()
    sticky_note.run()

# Ejecutar cuando se carga en Nuke
run_sticky_note() import sys
import os
import importlib

# Variable global para activar o desactivar los prints de depuración
DEBUG = False

def debug_print(*message):
    if DEBUG:
        print(*message)

# Definir la ruta del script que quieres ejecutar
ScriptPath = &quot;LGA_StickyNote.py&quot;

def obtener_plugin_path(script_path):
    &quot;&quot;&quot;
    Determina la ruta del plugin dependiendo si es Hiero o Nuke.
    - En Hiero: usa hiero.core.pluginPath()
    - En Nuke: usa la ruta del script
    &quot;&quot;&quot;
    try:
        import hiero.core
        # Intentar obtener la ruta de plugins de Hiero
        hiero_plugin_paths = hiero.core.pluginPath()
        if isinstance(hiero_plugin_paths, (tuple, list)) and len(hiero_plugin_paths) &gt; 0:
            return hiero_plugin_paths[0]
        return hiero_plugin_paths
    except (ImportError, NotImplementedError):
        # Si no estamos en Hiero o pluginPath no está disponible, usar la ruta del script
        return os.path.dirname(os.path.abspath(script_path))

def ejecutar_script(script_path):
    plugin_path = obtener_plugin_path(script_path)
    
    # Construir la ruta al directorio que contiene nuestro script
    script_dir = os.path.join(plugin_path, os.path.dirname(script_path))
    
    # Normalizar la ruta
    script_dir = os.path.normpath(script_dir)
    
    # Añadir el directorio al path de Python si no está ya
    if script_dir not in sys.path:
        sys.path.insert(0, script_dir)
    
    debug_print(&quot;Python path:&quot;, sys.path)
    debug_print(&quot;Script directory:&quot;, script_dir)
    debug_print(&quot;&quot;)
    
    # Obtener el nombre del módulo del script
    module_name = os.path.splitext(os.path.basename(script_path))[0]
    
    try:
        # Importar el módulo
        debug_print(f&quot;Intentando importar el módulo: {module_name}&quot;)
        module = importlib.import_module(module_name)
        
        # Recargar el módulo
        debug_print(f&quot;Recargando el módulo: {module_name}&quot;)
        module = importlib.reload(module)
        
        debug_print(f&quot;Módulo importado y recargado: {module}&quot;)
        
        # Si el módulo tiene una función main(), ejecutarla
        if hasattr(module, 'main') and callable(module.main):
            debug_print(&quot;Función main() encontrada. Ejecutando...&quot;)
            module.main()
        else:
            debug_print(f&quot;El módulo {module_name} no tiene una función main() ejecutable.&quot;)
            debug_print(&quot;Contenido del módulo:&quot;)
            for attr in dir(module):
                debug_print(f&quot;  {attr}&quot;)
    except Exception as e:
        debug_print(f&quot;Error al importar o ejecutar el módulo: {e}&quot;)
        import traceback
        traceback.print_exc()
        
        debug_print(f&quot;Asegúrate de que el archivo {os.path.basename(script_path)} está en {script_dir}&quot;)
        
        # Listar los contenidos del directorio para depuración
        debug_print(&quot;Contenidos del directorio:&quot;)
        try:
            for root, dirs, files in os.walk(script_dir):
                for file in files:
                    debug_print(os.path.join(root, file))
        except Exception as walk_error:
            debug_print(f&quot;Error al listar el directorio: {walk_error}&quot;)

# Ejecutar el script
ejecutar_script(ScriptPath)
import sys
import os
import importlib

# Variable global para activar o desactivar los prints de depuración
DEBUG = False

def debug_print(*message):
    if DEBUG:
        print(*message)

# Definir la ruta del script que quieres ejecutar
ScriptPath = &quot;LGA_StickyNote.py&quot;

def obtener_plugin_path(script_path):
    &quot;&quot;&quot;
    Determina la ruta del plugin dependiendo si es Hiero o Nuke.
    - En Hiero: usa hiero.core.pluginPath()
    - En Nuke: usa la ruta del script
    &quot;&quot;&quot;
    try:
        import hiero.core
        # Intentar obtener la ruta de plugins de Hiero
        hiero_plugin_paths = hiero.core.pluginPath()
        if isinstance(hiero_plugin_paths, (tuple, list)) and len(hiero_plugin_paths) &gt; 0:
            return hiero_plugin_paths[0]
        return hiero_plugin_paths
    except (ImportError, NotImplementedError):
        # Si no estamos en Hiero o pluginPath no está disponible, usar la ruta del script
        return os.path.dirname(os.path.abspath(script_path))

def ejecutar_script(script_path):
    plugin_path = obtener_plugin_path(script_path)
    
    # Construir la ruta al directorio que contiene nuestro script
    script_dir = os.path.join(plugin_path, os.path.dirname(script_path))
    
    # Normalizar la ruta
    script_dir = os.path.normpath(script_dir)
    
    # Añadir el directorio al path de Python si no está ya
    if script_dir not in sys.path:
        sys.path.insert(0, script_dir)
    
    debug_print(&quot;Python path:&quot;, sys.path)
    debug_print(&quot;Script directory:&quot;, script_dir)
    debug_print(&quot;&quot;)
    
    # Obtener el nombre del módulo del script
    module_name = os.path.splitext(os.path.basename(script_path))[0]
    
    try:
        # Importar el módulo
        debug_print(f&quot;Intentando importar el módulo: {module_name}&quot;)
        module = importlib.import_module(module_name)
        
        # Recargar el módulo
        debug_print(f&quot;Recargando el módulo: {module_name}&quot;)
        module = importlib.reload(module)
        
        debug_print(f&quot;Módulo importado y recargado: {module}&quot;)
        
        # Si el módulo tiene una función main(), ejecutarla
        if hasattr(module, 'main') and callable(module.main):
            debug_print(&quot;Función main() encontrada. Ejecutando...&quot;)
            module.main()
        else:
            debug_print(f&quot;El módulo {module_name} no tiene una función main() ejecutable.&quot;)
            debug_print(&quot;Contenido del módulo:&quot;)
            for attr in dir(module):
                debug_print(f&quot;  {attr}&quot;)
    except Exception as e:
        debug_print(f&quot;Error al importar o ejecutar el módulo: {e}&quot;)
        import traceback
        traceback.print_exc()
        
        debug_print(f&quot;Asegúrate de que el archivo {os.path.basename(script_path)} está en {script_dir}&quot;)
        
        # Listar los contenidos del directorio para depuración
        debug_print(&quot;Contenidos del directorio:&quot;)
        try:
            for root, dirs, files in os.walk(script_dir):
                for file in files:
                    debug_print(os.path.join(root, file))
        except Exception as walk_error:
            debug_print(f&quot;Error al listar el directorio: {walk_error}&quot;)

# Ejecutar el script
ejecutar_script(ScriptPath)
&quot;&quot;&quot;
____________________________________________________________________________________

  LGA_Write_Focus v1.1 | 2024 | Lega  
  Script para buscar, enfocar, centrar y hacer zoom a un nodo Write_Pub
____________________________________________________________________________________
&quot;&quot;&quot;

import nuke

def focus_write_pub():
    &quot;&quot;&quot;
    Busca un nodo Write llamado Write_Pub, lo centra en el DAG, 
    aplica un zoom fijo y abre su panel de propiedades.
    Si no encuentra el nodo, muestra un mensaje de error.
    &quot;&quot;&quot;
    # Valor de zoom fijo que queremos aplicar
    ZOOM_LEVEL = 1.5
    
    # Buscamos el nodo Write_Pub entre todos los nodos
    write_pub = None
    for node in nuke.allNodes('Write'):
        if node.name() == 'Write_Pub':
            write_pub = node
            break
    
    # Si encontramos el nodo, lo seleccionamos, centramos y mostramos sus propiedades
    if write_pub:
        # Deseleccionamos todos los nodos primero
        for n in nuke.selectedNodes():
            n['selected'].setValue(False)
        
        # Seleccionamos el nodo Write_Pub
        write_pub['selected'].setValue(True)
        
        # Calculamos el centro del nodo Write_Pub
        xCenter = write_pub.xpos() + write_pub.screenWidth()/2
        yCenter = write_pub.ypos() + write_pub.screenHeight()/2
        
        # Centramos y aplicamos zoom fijo
        nuke.zoom(ZOOM_LEVEL, [xCenter, yCenter])
        
        # Mostramos el panel de propiedades
        write_pub.showControlPanel()
        
        print(&quot;Nodo Write_Pub encontrado, centrado y enfocado en el panel de propiedades.&quot;)
    else:
        nuke.message(&quot;No se encontró ningún nodo Write llamado 'Write_Pub' en el script actual.&quot;)

# Ejecutar la función cuando se importe este script
focus_write_pub()


&quot;&quot;&quot;
____________________________________________________________________________________

  LGA_Write_Focus v1.2 | 2024 | Lega  
  Script para buscar, enfocar, centrar y hacer zoom a un nodo Write_Pub
  Optimizado para mejor rendimiento con muchos nodos
____________________________________________________________________________________
&quot;&quot;&quot;

import nuke
import time

def main():
    &quot;&quot;&quot;
    Busca un nodo Write llamado Write_Pub, lo centra en el DAG, 
    aplica un zoom fijo y abre su panel de propiedades.
    Si no encuentra el nodo, muestra un mensaje de error.
    Incluye medición de tiempo para cada proceso.
    &quot;&quot;&quot;
    tiempo_inicio_total = time.time()
    
    # Valor de zoom fijo que queremos aplicar
    ZOOM_LEVEL = 1.5
    
    # Método optimizado: buscar directamente por nombre
    tiempo_inicio_busqueda = time.time()
    write_pub = nuke.toNode('Write_Pub')
    tiempo_fin_busqueda = time.time()
    print(f&quot;Tiempo de búsqueda: {(tiempo_fin_busqueda - tiempo_inicio_busqueda) * 1000:.2f} ms&quot;)
    
    # Si encontramos el nodo, lo seleccionamos, centramos y mostramos sus propiedades
    if write_pub:
        # Verificamos que sea del tipo correcto
        if write_pub.Class() != 'Write':
            nuke.message(&quot;Se encontró un nodo llamado 'Write_Pub' pero no es del tipo Write.&quot;)
            return
            
        # Deseleccionamos todos los nodos
        tiempo_inicio_deseleccion = time.time()
        for n in nuke.selectedNodes():
            n['selected'].setValue(False)
        tiempo_fin_deseleccion = time.time()
        print(f&quot;Tiempo de deselección: {(tiempo_fin_deseleccion - tiempo_inicio_deseleccion) * 1000:.2f} ms&quot;)
        
        # Seleccionamos el nodo Write_Pub
        tiempo_inicio_seleccion = time.time()
        write_pub['selected'].setValue(True)
        tiempo_fin_seleccion = time.time()
        print(f&quot;Tiempo de selección: {(tiempo_fin_seleccion - tiempo_inicio_seleccion) * 1000:.2f} ms&quot;)
        
        # Calculamos el centro del nodo Write_Pub
        tiempo_inicio_calculo = time.time()
        xCenter = write_pub.xpos() + write_pub.screenWidth()/2
        yCenter = write_pub.ypos() + write_pub.screenHeight()/2
        tiempo_fin_calculo = time.time()
        print(f&quot;Tiempo de cálculo de centro: {(tiempo_fin_calculo - tiempo_inicio_calculo) * 1000:.2f} ms&quot;)
        
        # Centramos y aplicamos zoom fijo
        tiempo_inicio_zoom = time.time()
        nuke.zoom(ZOOM_LEVEL, [xCenter, yCenter])
        tiempo_fin_zoom = time.time()
        print(f&quot;Tiempo de zoom: {(tiempo_fin_zoom - tiempo_inicio_zoom) * 1000:.2f} ms&quot;)
        
        # Mostramos el panel de propiedades
        tiempo_inicio_panel = time.time()
        write_pub.showControlPanel()
        tiempo_fin_panel = time.time()
        print(f&quot;Tiempo de mostrar panel: {(tiempo_fin_panel - tiempo_inicio_panel) * 1000:.2f} ms&quot;)
        
        tiempo_fin_total = time.time()
        print(f&quot;Tiempo total de ejecución: {(tiempo_fin_total - tiempo_inicio_total) * 1000:.2f} ms&quot;)
        print(&quot;Nodo Write_Pub encontrado, centrado y enfocado en el panel de propiedades.&quot;)
    else:
        # Como alternativa, podemos buscar en nodos Write si no se encuentra directamente
        # pero solo si hay pocos nodos Write para no penalizar el rendimiento
        nodos_write = nuke.allNodes('Write')
        if len(nodos_write) &lt; 10:  # Solo buscar si hay pocos nodos Write
            for node in nodos_write:
                if node.name() == 'Write_Pub':
                    main()  # Volver a ejecutar la función ahora que se ha creado el nodo
                    return
                    
        tiempo_fin_total = time.time()
        print(f&quot;Tiempo total de ejecución (error): {(tiempo_fin_total - tiempo_inicio_total) * 1000:.2f} ms&quot;)
        nuke.message(&quot;No se encontró ningún nodo Write llamado 'Write_Pub' en el script actual.&quot;)

# Ejecutar la función cuando se importe este script
main()</script>
