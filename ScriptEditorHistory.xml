<?xml version="1.0" encoding="UTF-8"?><script>'''
LGA_StickyNote.py - Script simple para mostrar un diálogo de entrada de texto
'''

import nuke
from PySide2 import QtWidgets, QtGui, QtCore


class StickyNote(QtWidgets.QDialog):
    def __init__(self):
        super(StickyNote, self).__init__()
        
        self.text_edit = QtWidgets.QTextEdit()
        self.text_edit.setAlignment(QtCore.Qt.AlignCenter)
        self.title = QtWidgets.QLabel(&quot;&lt;b&gt;StickyNote&lt;/b&gt;&quot;)
        self.title.setAlignment(QtCore.Qt.AlignCenter)
        self.title.setStyleSheet(&quot;color: #AAAAAA;&quot;)

        self.help = QtWidgets.QLabel('&lt;span style=&quot;font-size:7pt; color:#AAAAAA;&quot;&gt;Ctrl+Enter para confirmar&lt;/span&gt;')
        self.help.setAlignment(QtCore.Qt.AlignCenter)

        self.layout = QtWidgets.QVBoxLayout()
        self.layout.addWidget(self.title)
        self.layout.addWidget(self.text_edit)
        self.layout.addWidget(self.help)
        self.setLayout(self.layout)
        self.resize(200, 150)
        self.setStyleSheet(&quot;background-color: #242527;&quot;)
        self.setWindowFlags(QtCore.Qt.FramelessWindowHint | QtCore.Qt.WindowStaysOnTopHint)

        self.text_edit.installEventFilter(self)
        
    def eventFilter(self, widget, event):
        if isinstance(event, QtGui.QKeyEvent):
            if event.key() == QtCore.Qt.Key_Return and event.modifiers() == QtCore.Qt.ControlModifier:
                print(&quot;Texto ingresado:&quot;, self.text_edit.toPlainText())
                self.close()
                return True
            elif event.key() == QtCore.Qt.Key_Escape:
                print(&quot;Se presionó ESC para salir&quot;)
                self.close()
                return True
        return False
    
    def showEvent(self, event):
        &quot;&quot;&quot;Se llama cuando el diálogo se muestra&quot;&quot;&quot;
        super().showEvent(event)
        self.activateWindow()  # Activar la ventana
        self.raise_()          # Traer al frente
        self.text_edit.setFocus()  # Dar foco al text_edit

    def run(self):
        # Usar QApplication.primaryScreen() en lugar de QDesktopWidget
        cursor_pos = QtGui.QCursor.pos()
        screen = QtWidgets.QApplication.primaryScreen()
        avail_space = screen.availableGeometry()
        
        posx = min(max(cursor_pos.x()-100, avail_space.left()), avail_space.right()-200)
        posy = min(max(cursor_pos.y()-80, avail_space.top()), avail_space.bottom()-150)
        
        self.move(QtCore.QPoint(posx, posy))
        self.text_edit.clear()
        self.activateWindow()  # Asegurar que la ventana está activa
        self.raise_()          # Traer al frente
        self.text_edit.setFocus()
        self.show()


# Variables globales
app = None
sticky_note = None

def main():
    &quot;&quot;&quot;Función principal para mostrar el diálogo de StickyNote.&quot;&quot;&quot;
    global app, sticky_note
    app = QtWidgets.QApplication.instance() or QtWidgets.QApplication([])
    sticky_note = StickyNote()
    sticky_note.run()

# Para uso en Nuke (no crea una nueva QApplication)
def run_sticky_note():
    &quot;&quot;&quot;Mostrar el StickyNote dentro de Nuke&quot;&quot;&quot;
    global sticky_note
    if sticky_note is None:
        sticky_note = StickyNote()
    sticky_note.run()

# Ejecutar cuando se carga en Nuke
run_sticky_note() import sys
import os
import importlib

# Variable global para activar o desactivar los prints de depuración
DEBUG = False

def debug_print(*message):
    if DEBUG:
        print(*message)

# Definir la ruta del script que quieres ejecutar
ScriptPath = &quot;LGA_StickyNote.py&quot;

def obtener_plugin_path(script_path):
    &quot;&quot;&quot;
    Determina la ruta del plugin dependiendo si es Hiero o Nuke.
    - En Hiero: usa hiero.core.pluginPath()
    - En Nuke: usa la ruta del script
    &quot;&quot;&quot;
    try:
        import hiero.core
        # Intentar obtener la ruta de plugins de Hiero
        hiero_plugin_paths = hiero.core.pluginPath()
        if isinstance(hiero_plugin_paths, (tuple, list)) and len(hiero_plugin_paths) &gt; 0:
            return hiero_plugin_paths[0]
        return hiero_plugin_paths
    except (ImportError, NotImplementedError):
        # Si no estamos en Hiero o pluginPath no está disponible, usar la ruta del script
        return os.path.dirname(os.path.abspath(script_path))

def ejecutar_script(script_path):
    plugin_path = obtener_plugin_path(script_path)
    
    # Construir la ruta al directorio que contiene nuestro script
    script_dir = os.path.join(plugin_path, os.path.dirname(script_path))
    
    # Normalizar la ruta
    script_dir = os.path.normpath(script_dir)
    
    # Añadir el directorio al path de Python si no está ya
    if script_dir not in sys.path:
        sys.path.insert(0, script_dir)
    
    debug_print(&quot;Python path:&quot;, sys.path)
    debug_print(&quot;Script directory:&quot;, script_dir)
    debug_print(&quot;&quot;)
    
    # Obtener el nombre del módulo del script
    module_name = os.path.splitext(os.path.basename(script_path))[0]
    
    try:
        # Importar el módulo
        debug_print(f&quot;Intentando importar el módulo: {module_name}&quot;)
        module = importlib.import_module(module_name)
        
        # Recargar el módulo
        debug_print(f&quot;Recargando el módulo: {module_name}&quot;)
        module = importlib.reload(module)
        
        debug_print(f&quot;Módulo importado y recargado: {module}&quot;)
        
        # Si el módulo tiene una función main(), ejecutarla
        if hasattr(module, 'main') and callable(module.main):
            debug_print(&quot;Función main() encontrada. Ejecutando...&quot;)
            module.main()
        else:
            debug_print(f&quot;El módulo {module_name} no tiene una función main() ejecutable.&quot;)
            debug_print(&quot;Contenido del módulo:&quot;)
            for attr in dir(module):
                debug_print(f&quot;  {attr}&quot;)
    except Exception as e:
        debug_print(f&quot;Error al importar o ejecutar el módulo: {e}&quot;)
        import traceback
        traceback.print_exc()
        
        debug_print(f&quot;Asegúrate de que el archivo {os.path.basename(script_path)} está en {script_dir}&quot;)
        
        # Listar los contenidos del directorio para depuración
        debug_print(&quot;Contenidos del directorio:&quot;)
        try:
            for root, dirs, files in os.walk(script_dir):
                for file in files:
                    debug_print(os.path.join(root, file))
        except Exception as walk_error:
            debug_print(f&quot;Error al listar el directorio: {walk_error}&quot;)

# Ejecutar el script
ejecutar_script(ScriptPath)
import sys
import os
import importlib

# Variable global para activar o desactivar los prints de depuración
DEBUG = False

def debug_print(*message):
    if DEBUG:
        print(*message)

# Definir la ruta del script que quieres ejecutar
ScriptPath = &quot;LGA_StickyNote.py&quot;

def obtener_plugin_path(script_path):
    &quot;&quot;&quot;
    Determina la ruta del plugin dependiendo si es Hiero o Nuke.
    - En Hiero: usa hiero.core.pluginPath()
    - En Nuke: usa la ruta del script
    &quot;&quot;&quot;
    try:
        import hiero.core
        # Intentar obtener la ruta de plugins de Hiero
        hiero_plugin_paths = hiero.core.pluginPath()
        if isinstance(hiero_plugin_paths, (tuple, list)) and len(hiero_plugin_paths) &gt; 0:
            return hiero_plugin_paths[0]
        return hiero_plugin_paths
    except (ImportError, NotImplementedError):
        # Si no estamos en Hiero o pluginPath no está disponible, usar la ruta del script
        return os.path.dirname(os.path.abspath(script_path))

def ejecutar_script(script_path):
    plugin_path = obtener_plugin_path(script_path)
    
    # Construir la ruta al directorio que contiene nuestro script
    script_dir = os.path.join(plugin_path, os.path.dirname(script_path))
    
    # Normalizar la ruta
    script_dir = os.path.normpath(script_dir)
    
    # Añadir el directorio al path de Python si no está ya
    if script_dir not in sys.path:
        sys.path.insert(0, script_dir)
    
    debug_print(&quot;Python path:&quot;, sys.path)
    debug_print(&quot;Script directory:&quot;, script_dir)
    debug_print(&quot;&quot;)
    
    # Obtener el nombre del módulo del script
    module_name = os.path.splitext(os.path.basename(script_path))[0]
    
    try:
        # Importar el módulo
        debug_print(f&quot;Intentando importar el módulo: {module_name}&quot;)
        module = importlib.import_module(module_name)
        
        # Recargar el módulo
        debug_print(f&quot;Recargando el módulo: {module_name}&quot;)
        module = importlib.reload(module)
        
        debug_print(f&quot;Módulo importado y recargado: {module}&quot;)
        
        # Si el módulo tiene una función main(), ejecutarla
        if hasattr(module, 'main') and callable(module.main):
            debug_print(&quot;Función main() encontrada. Ejecutando...&quot;)
            module.main()
        else:
            debug_print(f&quot;El módulo {module_name} no tiene una función main() ejecutable.&quot;)
            debug_print(&quot;Contenido del módulo:&quot;)
            for attr in dir(module):
                debug_print(f&quot;  {attr}&quot;)
    except Exception as e:
        debug_print(f&quot;Error al importar o ejecutar el módulo: {e}&quot;)
        import traceback
        traceback.print_exc()
        
        debug_print(f&quot;Asegúrate de que el archivo {os.path.basename(script_path)} está en {script_dir}&quot;)
        
        # Listar los contenidos del directorio para depuración
        debug_print(&quot;Contenidos del directorio:&quot;)
        try:
            for root, dirs, files in os.walk(script_dir):
                for file in files:
                    debug_print(os.path.join(root, file))
        except Exception as walk_error:
            debug_print(f&quot;Error al listar el directorio: {walk_error}&quot;)

# Ejecutar el script
ejecutar_script(ScriptPath)
</script>
