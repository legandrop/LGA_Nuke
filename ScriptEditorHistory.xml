<?xml version="1.0" encoding="UTF-8"?><script>import nuke
from PySide2 import QtWidgets, QtCore

class MiddleClickInterceptor(QtCore.QObject):
    def __init__(self):
        super().__init__()
        self.start_pos = None  # Guarda la posición inicial del clic

    def eventFilter(self, obj, event):
        if event.type() == QtCore.QEvent.MouseButtonPress:
            if event.button() == QtCore.Qt.MiddleButton:
                self.start_pos = event.pos()  # Guarda la posición inicial del clic
                return False  # Permitimos que el evento continúe (para drag)

        elif event.type() == QtCore.QEvent.MouseButtonRelease:
            if event.button() == QtCore.Qt.MiddleButton and self.start_pos:
                end_pos = event.pos()  # Obtiene la posición donde se soltó el botón
                distance = (end_pos - self.start_pos).manhattanLength()  # Distancia en píxeles

                if distance &lt; 5:  # 🔹 Si fue un clic sin arrastre
                    self.start_pos = None  # Reseteamos la posición inicial
                    
                    # 🔹 DETENEMOS LA PROPAGACIÓN DEL EVENTO 🔹
                    event.accept()  # Evita que el evento siga propagándose en Qt

                    # 🔹 Retrasamos el mensaje para evitar problemas con Qt
                    QtCore.QTimer.singleShot(50, lambda: nuke.message(&quot;Ruedita del mouse apretada&quot;))

                    return True  # 🔹 BLOQUEAMOS la acción original del clic sin arrastre

                # 🔹 Si hubo arrastre, permitimos el evento normalmente
                self.start_pos = None
                return False  

        return False  # Permitimos que otros eventos sigan su curso normal

# Instalar el filtro en la aplicación de Nuke
app = QtWidgets.QApplication.instance()
if app:
    interceptor = MiddleClickInterceptor()
    app.installEventFilter(interceptor)
# Version que descarga todas las versiones y notas asociadas a las tareas asignadas al usuario
# v03: solo muestra las que tuvieron cambios desde una fecha determinada

import os
import shotgun_api3

# Recuperar datos de autenticacion de las variables de entorno
url = os.environ.get(&quot;SHOTGRID_URL&quot;)
login = os.environ.get(&quot;SHOTGRID_LOGIN&quot;)
password = os.environ.get(&quot;SHOTGRID_PASSWORD&quot;)

# Crear una instancia de la API de ShotGrid usando login y password
sg = shotgun_api3.Shotgun(url, login=login, password=password)

def get_assigned_tasks(sg, user_login, min_date=None):
    filters = [
        ['task_assignees.HumanUser.login', 'is', user_login],
        ['sg_status_list', 'is_not', 'fin']
    ]
    
    # Añadir filtros de fecha si se especifica una fecha mínima
    if min_date:
        date_filter = {
            'filter_operator': 'any',
            'filters': [
                ['created_at', 'greater_than', min_date],
                ['updated_at', 'greater_than', min_date]
            ]
        }
        filters.append(date_filter)
    
    # Añadir campos para versiones y notas
    fields = [
        'id', 
        'content', 
        'sg_description', 
        'sg_status_list', 
        'entity', 
        'entity.Shot.code', 
        'entity.Shot.description',
        'entity.Shot.sg_status_list',
        'project.Project.name',
        'project.Project.sg_status',
        'versions',  # Versiones asociadas a la tarea
        'notes'  # Notas asociadas a la tarea
    ]
    return sg.find(&quot;Task&quot;, filters, fields)

def find_latest_version_for_shot(sg, shot_id):
    # Buscar la última versión asociada al shot
    filters = [
        ['entity', 'is', {'type': 'Shot', 'id': shot_id}]
    ]
    fields = ['id', 'code', 'sg_status_list', 'description', 'created_at', 'user']
    # Ordenar por fecha de creación descendente y limitar a 1 resultado
    return sg.find_one(&quot;Version&quot;, filters, fields, [{'field_name': 'created_at', 'direction': 'desc'}])

def print_task_info(task, sg):
    print(f&quot;\nProject: {task.get('project.Project.name', 'No project available')}&quot;)
    print(f&quot;Project Status: {task.get('project.Project.sg_status', 'No status available')}&quot;)
    print(f&quot;Shot: {task.get('entity.Shot.code', 'No shot available')}&quot;)
    print(f&quot;Shot Status: {task.get('entity.Shot.sg_status_list', 'No status available')}&quot;)
    print(f&quot;Task: {task['content']}&quot;)
    print(f&quot;Task Status: {task['sg_status_list']}&quot;)
    print(f&quot;Description: {task.get('entity.Shot.description', 'No description available')}&quot;)
    
    # Obtener la última versión asociada al shot
    if task.get('entity'):
        shot_id = task['entity']['id']
        version = find_latest_version_for_shot(sg, shot_id)
        
        if version:
            print(&quot;\nÚltima versión:&quot;)
            print(f&quot;  - Version SG: {version.get('code', 'No version code')}&quot;)
            print(f&quot;    Status: {version.get('sg_status_list', 'No status')}&quot;)
            print(f&quot;    Description: {version.get('description', 'No description')}&quot;)
            print(f&quot;    Created At: {version.get('created_at', 'No date available')}&quot;)
            print(f&quot;    User: {version['user']['name'] if version.get('user') else 'No user available'}&quot;)
            
            # Obtener notas de la versión
            notes = sg.find(&quot;Note&quot;, [['note_links', 'in', {'type': 'Version', 'id': version['id']}]], ['content', 'user'])
            if notes:
                print(&quot;    Comments:&quot;)
                for note in notes:
                    print(f&quot;      - {note['content']} (User: {note['user']['name']})&quot;)
            else:
                print(&quot;    No comments found.&quot;)
        else:
            print(&quot;\nNo se encontraron versiones asociadas en ShotGrid.&quot;)
    
    # Generar URL de la tarea usando la base URL de ShotGrid
    task_url = f&quot;{sg.base_url}/detail/Task/{task['id']}&quot;
    print(f&quot;\nTask URL: {task_url}&quot;)

def main():
    try:
        # Especificar fecha mínima con formato completo (ejemplo: 1 de marzo de 2025 a las 00:00 UTC)
        min_date = '2025-03-01T00:00:00Z'
        tasks = get_assigned_tasks(sg, login, min_date)
        
        if tasks:
            print(f&quot;\nTareas asignadas:&quot;)
            for task in tasks:
                print_task_info(task, sg)
        else:
            print(&quot;No se encontraron tareas asignadas&quot;)
            
    except Exception as e:
        print(f&quot;Error al obtener tareas: {e}&quot;)

if __name__ == &quot;__main__&quot;:
    main()
</script>
