set cut_paste_input [stack 0]
version 15.0 v4
BackdropNode {
 inputs 0
 name BackdropNode1
 knobChanged "try:\n    node=nuke.thisNode()\n    knob=nuke.thisKnob()\n    name=knob.name()\n\n    def updateKnobs():\n        nodeWidth=node\['bdwidth'].getValue()\n        nodeHeight=node\['bdheight'].getValue()\n        node\['sizeNode'].setValue(\[int(nodeWidth),int(nodeHeight)])\n        node\['node_position_x'].setValue(int(node\['xpos'].value()))\n        node\['node_position_y'].setValue(int(node\['ypos'].value()))\n        node\['zorder'].setValue(int(node\['z_order'].getValue()))\n        node\['font_size'].setValue(int(node\['note_font_size'].getValue()))\n        node\['oz_appearance'].setValue( node\['appearance'].value() )\n        node\['oz_border_width'].setValue( node\['border_width'].value() )\n        #node\['fontColor'].setValue(int(node\['note_font_color'].getValue()))\n\n    def updateLabelKnob():\n        curLabel = node\['label'].getValue()\n        if '<p align=center>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<p align=center>', ''))\n            node\['alignment'].setValue(1)\n        elif '<p align=right>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<p align=right>', ''))\n            node\['alignment'].setValue(2)\n        elif '<center>' in curLabel:\n            node\['text'].setValue(curLabel.replace('<center>', ''))\n            node\['alignment'].setValue(1)\n        else:\n            node\['text'].setValue(curLabel)\n            node\['alignment'].setValue(0)\n\n    ### OPENING SETUP\n    if name=='showPanel':\n        updateKnobs()\n        updateLabelKnob()\n\n    ### UPDATE STYLE\n    if name in \['oz_appearance', 'oz_border_width']:\n        node\['appearance'].setValue( node\['oz_appearance'].value() )\n        node\['border_width'].setValue( node\['oz_border_width'].value() )\n\n    ### CHANGE THE SIZE OF THE NODE\n    if name=='sizeNode':\n        node\['bdwidth'].setValue(int(node\['sizeNode'].getValue()\[0]))\n        node\['bdheight'].setValue(int(node\['sizeNode'].getValue()\[1]))\n\n    ### POSITION\n    if name=='node_position_x' or name=='node_position_y':\n        node.setXYpos(int(node\['node_position_x'].getValue()),int(node\['node_position_y'].getValue()))\n\n    ### ZORDER\n    if name=='zorder':\n        node\['z_order'].setValue(node\['zorder'].getValue())\n\n    ### UPDATE THE 'CURRENT SIZE' AND ORDER\n    #if name=='bdwidth' or name=='bdheight' or name=='z_order':\n    if name in \['bdwidth', 'bdheight', 'z_order']:\n        updateKnobs()\n\n    ### UPDATE LABEL\n    title = node\['name'].value()\n    text = node\['text'].value()\n\n    if name in \['text', 'alignment', 'title', 'Oz_Backdrop_bold', 'note_font_color']:\n        text = node\['text'].value()\n        alignment = node\['alignment'].getValue()\n        is_bold = node\['Oz_Backdrop_bold'].value()\n\n        if alignment == 1:\n            newLabel = f'<p align=center>\{text\}</p>'\n        elif alignment == 2:\n            newLabel = f'<p align=right>\{text\}</p>'\n        else:\n            newLabel = text\n\n        # Captura la fuente actual y muestra en consola\n        current_font = node\['note_font'].value()\n        #print(f\"Fuente antes de cambiar: \{current_font\}\")\n\n        # Solo proceder si current_font tiene un valor vÃ¡lido\n        if current_font:\n            font_family = current_font.replace(\" Bold\", \"\").strip()\n\n            # Modifica la fuente segÃºn el estado del checkbox de bold\n            if is_bold:\n                new_font = f\"\{font_family\} Bold\"\n            else:\n                new_font = font_family\n\n            # Aplicar el nuevo valor de la fuente\n            node\['note_font'].setValue(new_font)\n            #print(f\"Fuente despues de cambiar: \{new_font\}\")\n\n        # Actualiza el label sin etiquetas HTML\n        node\['label'].setValue(newLabel)\n\n\n\n\n    if name==\"font_size\":\n        new_font_size = node\[\"font_size\"].value()\n        node\['note_font_size'].setValue(new_font_size)\n\n\n\n    del newLabel\n\nexcept:\n    pass\n"
 tile_color 0x4f7f5601
 label preRender
 note_font "Verdana Bold"
 note_font_size 50
 selected true
 xpos -135
 ypos -493
 bdwidth 468
 bdheight 315
 z_order 4
 addUserKnob {20 Settings}
 addUserKnob {43 text l Text}
 text preRender
 addUserKnob {7 font_size l "Font Size" R 10 100}
 font_size 50
 addUserKnob {6 Oz_Backdrop_bold l Bold -STARTLINE}
 addUserKnob {4 alignment l "" -STARTLINE M {left center right}}
 addUserKnob {22 font_color_toggle l B/W -STARTLINE T "\nnode = nuke.thisNode()\n\n# Obtiene el color actual desde note_font_color\ncurrent_font_color = node\['note_font_color'].value()\n\n# Definir los valores\nwhite_color = 4294967295  # Blanco que funciona\nblack_color = 0x000000  # Negro que funciona\n\n# Alterna entre blanco y negro\nif current_font_color == white_color:\n    new_font_color = black_color\nelse:\n    new_font_color = white_color\n\n# Establece el nuevo color en note_font_color\nnode\['note_font_color'].setValue(new_font_color)\n\nprint(f\"Botón B/W: Cambiado color a \{'Blanco' if new_font_color == white_color else 'Negro'\}\")\n"}
 addUserKnob {26 divider1 l "" +STARTLINE}
 addUserKnob {26 S01 l " " T " "}
 addUserKnob {22 "Random Color" l " <img src=\"ColorBars.png\">" t "Generates a random color for the Backdrop (dark shades)" -STARTLINE T "import random\nn=nuke.thisNode()\nr,g,b=\[(float(random.randint( 20, 40)))/100,(float(random.randint( 10, 50)))/100,(float(random.randint( 15, 60)))/100]\nn\['tile_color'].setValue( int('%02x%02x%02x%02x' % (int(r*255),int(g*255),int(b*255),1),16) )\n"}
 addUserKnob {22 Red l "<div style=\"background-color: #54352e; color: #54352e; font-size: 7px;\">______</div><div style=\"background-color: #70544e; color: #70544e; font-size: 7px;\">______</div><div style=\"background-color: #9b5647; color: #9b5647; font-size: 7px;\">______</div>" t "Quickly apply between 3 shades of red to the Backdrop" -STARTLINE T "import colorsys\nn=nuke.thisNode()\ndef clamp(x):\n    return int(max(0, min(x, 255)))\ntile_color=n\['tile_color'].value()\ncolors=\[\[0.03, 0.45, 0.33], \[0.03, 0.3, 0.44], \[0.03, 0.54, 0.61]]\n#converting colors\ncolors_hex=\[colorsys.hsv_to_rgb(color\[0],color\[1],color\[2]) for color in colors]\ncolors_int=\[int('%02x%02x%02x%02x' % (clamp(color\[0]*255),clamp(color\[1]*255),clamp(color\[2]*255),255), 16) for color in colors_hex]\n#selecting color logic\nif tile_color in colors_int:\n    current_index=colors_int.index(tile_color)\n    if current_index >= (len(colors_int)-1):\n        new_color = colors_int\[0]\n    else:\n        new_color = colors_int\[current_index+1]\nelse:\n    new_color = colors_int\[0]\n#apply color\nn\['tile_color'].setValue(new_color)"}
 addUserKnob {22 Orange l "<div style=\"background-color: #54472e; color: #54472e; font-size: 7px;\">______</div><div style=\"background-color: #70644e; color: #70644e; font-size: 7px;\">______</div><div style=\"background-color: #9b7e47; color: #9b7e47; font-size: 7px;\">______</div>" t "Quickly apply between 3 shades of orange to the Backdrop" -STARTLINE T "import colorsys\nn=nuke.thisNode()\ndef clamp(x):\n    return int(max(0, min(x, 255)))\ntile_color=n\['tile_color'].value()\ncolors=\[\[0.11, 0.45, 0.33], \[0.11, 0.3, 0.44], \[0.11, 0.54, 0.61]]\n#converting colors\ncolors_hex=\[colorsys.hsv_to_rgb(color\[0],color\[1],color\[2]) for color in colors]\ncolors_int=\[int('%02x%02x%02x%02x' % (clamp(color\[0]*255),clamp(color\[1]*255),clamp(color\[2]*255),255), 16) for color in colors_hex]\n#selecting color logic\nif tile_color in colors_int:\n    current_index=colors_int.index(tile_color)\n    if current_index >= (len(colors_int)-1):\n        new_color = colors_int\[0]\n    else:\n        new_color = colors_int\[current_index+1]\nelse:\n    new_color = colors_int\[0]\n#apply color\nn\['tile_color'].setValue(new_color)"}
 addUserKnob {22 Yellow l "<div style=\"background-color: #54522e; color: #54522e; font-size: 7px;\">______</div><div style=\"background-color: #706e4e; color: #706e4e; font-size: 7px;\">______</div><div style=\"background-color: #9b9847; color: #9b9847; font-size: 7px;\">______</div>" t "Quickly apply between 3 shades of yellow to the Backdrop" -STARTLINE T "import colorsys\nn=nuke.thisNode()\ndef clamp(x):\n    return int(max(0, min(x, 255)))\ntile_color=n\['tile_color'].value()\ncolors=\[\[0.16, 0.45, 0.33], \[0.16, 0.3, 0.44], \[0.16, 0.54, 0.61]]\n#converting colors\ncolors_hex=\[colorsys.hsv_to_rgb(color\[0],color\[1],color\[2]) for color in colors]\ncolors_int=\[int('%02x%02x%02x%02x' % (clamp(color\[0]*255),clamp(color\[1]*255),clamp(color\[2]*255),255), 16) for color in colors_hex]\n#selecting color logic\nif tile_color in colors_int:\n    current_index=colors_int.index(tile_color)\n    if current_index >= (len(colors_int)-1):\n        new_color = colors_int\[0]\n    else:\n        new_color = colors_int\[current_index+1]\nelse:\n    new_color = colors_int\[0]\n#apply color\nn\['tile_color'].setValue(new_color)"}
 addUserKnob {22 Green l "<div style=\"background-color: #31542e; color: #31542e; font-size: 7px;\">______</div><div style=\"background-color: #51704e; color: #51704e; font-size: 7px;\">______</div><div style=\"background-color: #4e9b47; color: #4e9b47; font-size: 7px;\">______</div>" t "Quickly apply between 3 shades of green to the Backdrop" -STARTLINE T "import colorsys\nn=nuke.thisNode()\ndef clamp(x):\n    return int(max(0, min(x, 255)))\ntile_color=n\['tile_color'].value()\ncolors=\[\[0.32, 0.45, 0.33], \[0.32, 0.3, 0.44], \[0.32, 0.54, 0.61]]\n#converting colors\ncolors_hex=\[colorsys.hsv_to_rgb(color\[0],color\[1],color\[2]) for color in colors]\ncolors_int=\[int('%02x%02x%02x%02x' % (clamp(color\[0]*255),clamp(color\[1]*255),clamp(color\[2]*255),255), 16) for color in colors_hex]\n#selecting color logic\nif tile_color in colors_int:\n    current_index=colors_int.index(tile_color)\n    if current_index >= (len(colors_int)-1):\n        new_color = colors_int\[0]\n    else:\n        new_color = colors_int\[current_index+1]\nelse:\n    new_color = colors_int\[0]\n#apply color\nn\['tile_color'].setValue(new_color)"}
 addUserKnob {22 Cyan l "<div style=\"background-color: #2e5451; color: #2e5451; font-size: 7px;\">______</div><div style=\"background-color: #4e706e; color: #4e706e; font-size: 7px;\">______</div><div style=\"background-color: #479b96; color: #479b96; font-size: 7px;\">______</div>" t "Quickly apply between 3 shades of cyan to the Backdrop" -STARTLINE T "import colorsys\nn=nuke.thisNode()\ndef clamp(x):\n    return int(max(0, min(x, 255)))\ntile_color=n\['tile_color'].value()\ncolors=\[\[0.49, 0.45, 0.33], \[0.49, 0.3, 0.44], \[0.49, 0.54, 0.61]]\n#converting colors\ncolors_hex=\[colorsys.hsv_to_rgb(color\[0],color\[1],color\[2]) for color in colors]\ncolors_int=\[int('%02x%02x%02x%02x' % (clamp(color\[0]*255),clamp(color\[1]*255),clamp(color\[2]*255),255), 16) for color in colors_hex]\n#selecting color logic\nif tile_color in colors_int:\n    current_index=colors_int.index(tile_color)\n    if current_index >= (len(colors_int)-1):\n        new_color = colors_int\[0]\n    else:\n        new_color = colors_int\[current_index+1]\nelse:\n    new_color = colors_int\[0]\n#apply color\nn\['tile_color'].setValue(new_color)"}
 addUserKnob {22 Blue l "<div style=\"background-color: #2e4854; color: #2e4854; font-size: 7px;\">______</div><div style=\"background-color: #4e6670; color: #4e6670; font-size: 7px;\">______</div><div style=\"background-color: #47829b; color: #47829b; font-size: 7px;\">______</div>" t "Quickly apply between 3 shades of blue to the Backdrop" -STARTLINE T "import colorsys\nn=nuke.thisNode()\ndef clamp(x):\n    return int(max(0, min(x, 255)))\ntile_color=n\['tile_color'].value()\ncolors=\[\[0.55, 0.45, 0.33], \[0.55, 0.3, 0.44], \[0.55, 0.54, 0.61]]\n#converting colors\ncolors_hex=\[colorsys.hsv_to_rgb(color\[0],color\[1],color\[2]) for color in colors]\ncolors_int=\[int('%02x%02x%02x%02x' % (clamp(color\[0]*255),clamp(color\[1]*255),clamp(color\[2]*255),255), 16) for color in colors_hex]\n#selecting color logic\nif tile_color in colors_int:\n    current_index=colors_int.index(tile_color)\n    if current_index >= (len(colors_int)-1):\n        new_color = colors_int\[0]\n    else:\n        new_color = colors_int\[current_index+1]\nelse:\n    new_color = colors_int\[0]\n#apply color\nn\['tile_color'].setValue(new_color)"}
 addUserKnob {22 Dark_blue l "<div style=\"background-color: #3a2e54; color: #3a2e54; font-size: 7px;\">______</div><div style=\"background-color: #4e4f70; color: #4e4f70; font-size: 7px;\">______</div><div style=\"background-color: #474a9b; color: #474a9b; font-size: 7px;\">______</div>" t "Quickly apply between 3 shades of dark_blue to the Backdrop" -STARTLINE T "import colorsys\nn=nuke.thisNode()\ndef clamp(x):\n    return int(max(0, min(x, 255)))\ntile_color=n\['tile_color'].value()\ncolors=\[\[0.72, 0.45, 0.33], \[0.66, 0.3, 0.44], \[0.66, 0.54, 0.61]]\n#converting colors\ncolors_hex=\[colorsys.hsv_to_rgb(color\[0],color\[1],color\[2]) for color in colors]\ncolors_int=\[int('%02x%02x%02x%02x' % (clamp(color\[0]*255),clamp(color\[1]*255),clamp(color\[2]*255),255), 16) for color in colors_hex]\n#selecting color logic\nif tile_color in colors_int:\n    current_index=colors_int.index(tile_color)\n    if current_index >= (len(colors_int)-1):\n        new_color = colors_int\[0]\n    else:\n        new_color = colors_int\[current_index+1]\nelse:\n    new_color = colors_int\[0]\n#apply color\nn\['tile_color'].setValue(new_color)"}
 addUserKnob {22 Magenta l "<div style=\"background-color: #4a2e54; color: #4a2e54; font-size: 7px;\">______</div><div style=\"background-color: #674e70; color: #674e70; font-size: 7px;\">______</div><div style=\"background-color: #85479b; color: #85479b; font-size: 7px;\">______</div>" t "Quickly apply between 3 shades of magenta to the Backdrop" -STARTLINE T "import colorsys\nn=nuke.thisNode()\ndef clamp(x):\n    return int(max(0, min(x, 255)))\ntile_color=n\['tile_color'].value()\ncolors=\[\[0.79, 0.45, 0.33], \[0.79, 0.3, 0.44], \[0.79, 0.54, 0.61]]\n#converting colors\ncolors_hex=\[colorsys.hsv_to_rgb(color\[0],color\[1],color\[2]) for color in colors]\ncolors_int=\[int('%02x%02x%02x%02x' % (clamp(color\[0]*255),clamp(color\[1]*255),clamp(color\[2]*255),255), 16) for color in colors_hex]\n#selecting color logic\nif tile_color in colors_int:\n    current_index=colors_int.index(tile_color)\n    if current_index >= (len(colors_int)-1):\n        new_color = colors_int\[0]\n    else:\n        new_color = colors_int\[current_index+1]\nelse:\n    new_color = colors_int\[0]\n#apply color\nn\['tile_color'].setValue(new_color)"}
 addUserKnob {22 Pink l "<div style=\"background-color: #542e49; color: #542e49; font-size: 7px;\">______</div><div style=\"background-color: #704e66; color: #704e66; font-size: 7px;\">______</div><div style=\"background-color: #9b4784; color: #9b4784; font-size: 7px;\">______</div>" t "Quickly apply between 3 shades of pink to the Backdrop" -STARTLINE T "import colorsys\nn=nuke.thisNode()\ndef clamp(x):\n    return int(max(0, min(x, 255)))\ntile_color=n\['tile_color'].value()\ncolors=\[\[0.88, 0.45, 0.33], \[0.88, 0.3, 0.44], \[0.88, 0.54, 0.61]]\n#converting colors\ncolors_hex=\[colorsys.hsv_to_rgb(color\[0],color\[1],color\[2]) for color in colors]\ncolors_int=\[int('%02x%02x%02x%02x' % (clamp(color\[0]*255),clamp(color\[1]*255),clamp(color\[2]*255),255), 16) for color in colors_hex]\n#selecting color logic\nif tile_color in colors_int:\n    current_index=colors_int.index(tile_color)\n    if current_index >= (len(colors_int)-1):\n        new_color = colors_int\[0]\n    else:\n        new_color = colors_int\[current_index+1]\nelse:\n    new_color = colors_int\[0]\n#apply color\nn\['tile_color'].setValue(new_color)"}
 addUserKnob {26 space l " " T " "}
 addUserKnob {22 Input l "<div style=\"background-color: #999999; color: #999999; font-size: 7px;\">______</div><div style=\"background-color: #999999; color: #999999; font-size: 7px;\">______</div><div style=\"background-color: #999999; color: #999999; font-size: 7px;\">______</div><div>Input</div>" t "Quickly apply a Backdrop for Cam" -STARTLINE T "import colorsys\nn=nuke.thisNode()\ndef clamp(x):\n    return int(max(0, min(x, 255)))\ntile_color=n\['tile_color'].value()\ncolors=\[\[0.0, 0.0, 0.6], \[0.0, 0.0, 0.6], \[0.0, 0.0, 0.6]]\n#converting colors\ncolors_hex=\[colorsys.hsv_to_rgb(color\[0],color\[1],color\[2]) for color in colors]\ncolors_int=\[int('%02x%02x%02x%02x' % (clamp(color\[0]*255),clamp(color\[1]*255),clamp(color\[2]*255),255), 16) for color in colors_hex]\n#selecting color logic\nif tile_color in colors_int:\n    current_index=colors_int.index(tile_color)\n    if current_index >= (len(colors_int)-1):\n        new_color = colors_int\[0]\n    else:\n        new_color = colors_int\[current_index+1]\nelse:\n    new_color = colors_int\[0]\n#apply color\nn\['tile_color'].setValue(new_color)"}
 addUserKnob {22 Aovs l "<div style=\"background-color: #666666; color: #666666; font-size: 7px;\">______</div><div style=\"background-color: #666666; color: #666666; font-size: 7px;\">______</div><div style=\"background-color: #666666; color: #666666; font-size: 7px;\">______</div><div>Aovs</div>" t "Quickly apply a Backdrop for Elements" -STARTLINE T "import colorsys\nn=nuke.thisNode()\ndef clamp(x):\n    return int(max(0, min(x, 255)))\ntile_color=n\['tile_color'].value()\ncolors=\[\[0.0, 0.0, 0.4], \[0.0, 0.0, 0.4], \[0.0, 0.0, 0.4]]\n#converting colors\ncolors_hex=\[colorsys.hsv_to_rgb(color\[0],color\[1],color\[2]) for color in colors]\ncolors_int=\[int('%02x%02x%02x%02x' % (clamp(color\[0]*255),clamp(color\[1]*255),clamp(color\[2]*255),255), 16) for color in colors_hex]\n#selecting color logic\nif tile_color in colors_int:\n    current_index=colors_int.index(tile_color)\n    if current_index >= (len(colors_int)-1):\n        new_color = colors_int\[0]\n    else:\n        new_color = colors_int\[current_index+1]\nelse:\n    new_color = colors_int\[0]\n#apply color\nn\['tile_color'].setValue(new_color)"}
 addUserKnob {22 Mattee l "<div style=\"background-color: #767f75; color: #767f75; font-size: 7px;\">______</div><div style=\"background-color: #767f75; color: #767f75; font-size: 7px;\">______</div><div style=\"background-color: #767f75; color: #767f75; font-size: 7px;\">______</div><div>Mattee</div>" t "Quickly apply a Backdrop for Key" -STARTLINE T "import colorsys\nn=nuke.thisNode()\ndef clamp(x):\n    return int(max(0, min(x, 255)))\ntile_color=n\['tile_color'].value()\ncolors=\[\[0.32, 0.08, 0.5], \[0.32, 0.08, 0.5], \[0.32, 0.08, 0.5]]\n#converting colors\ncolors_hex=\[colorsys.hsv_to_rgb(color\[0],color\[1],color\[2]) for color in colors]\ncolors_int=\[int('%02x%02x%02x%02x' % (clamp(color\[0]*255),clamp(color\[1]*255),clamp(color\[2]*255),255), 16) for color in colors_hex]\n#selecting color logic\nif tile_color in colors_int:\n    current_index=colors_int.index(tile_color)\n    if current_index >= (len(colors_int)-1):\n        new_color = colors_int\[0]\n    else:\n        new_color = colors_int\[current_index+1]\nelse:\n    new_color = colors_int\[0]\n#apply color\nn\['tile_color'].setValue(new_color)"}
 addUserKnob {22 Crypt l "<div style=\"background-color: #34662f; color: #34662f; font-size: 7px;\">______</div><div style=\"background-color: #34662f; color: #34662f; font-size: 7px;\">______</div><div style=\"background-color: #34662f; color: #34662f; font-size: 7px;\">______</div><div>Crypt</div>" t "Quickly apply a Backdrop for Cleanup" -STARTLINE T "import colorsys\nn=nuke.thisNode()\ndef clamp(x):\n    return int(max(0, min(x, 255)))\ntile_color=n\['tile_color'].value()\ncolors=\[\[0.32, 0.53, 0.4], \[0.32, 0.53, 0.4], \[0.32, 0.53, 0.4]]\n#converting colors\ncolors_hex=\[colorsys.hsv_to_rgb(color\[0],color\[1],color\[2]) for color in colors]\ncolors_int=\[int('%02x%02x%02x%02x' % (clamp(color\[0]*255),clamp(color\[1]*255),clamp(color\[2]*255),255), 16) for color in colors_hex]\n#selecting color logic\nif tile_color in colors_int:\n    current_index=colors_int.index(tile_color)\n    if current_index >= (len(colors_int)-1):\n        new_color = colors_int\[0]\n    else:\n        new_color = colors_int\[current_index+1]\nelse:\n    new_color = colors_int\[0]\n#apply color\nn\['tile_color'].setValue(new_color)"}
 addUserKnob {22 Refe l "<div style=\"background-color: #273c56; color: #273c56; font-size: 7px;\">______</div><div style=\"background-color: #273c56; color: #273c56; font-size: 7px;\">______</div><div style=\"background-color: #273c56; color: #273c56; font-size: 7px;\">______</div>" t "Quickly apply a Backdrop for Ref" -STARTLINE T "import colorsys\nn=nuke.thisNode()\ndef clamp(x):\n    return int(max(0, min(x, 255)))\ntile_color=n\['tile_color'].value()\ncolors=\[\[0.59, 0.55, 0.34], \[0.59, 0.55, 0.34], \[0.59, 0.55, 0.34]]\n#converting colors\ncolors_hex=\[colorsys.hsv_to_rgb(color\[0],color\[1],color\[2]) for color in colors]\ncolors_int=\[int('%02x%02x%02x%02x' % (clamp(color\[0]*255),clamp(color\[1]*255),clamp(color\[2]*255),255), 16) for color in colors_hex]\n#selecting color logic\nif tile_color in colors_int:\n    current_index=colors_int.index(tile_color)\n    if current_index >= (len(colors_int)-1):\n        new_color = colors_int\[0]\n    else:\n        new_color = colors_int\[current_index+1]\nelse:\n    new_color = colors_int\[0]\n#apply color\nn\['tile_color'].setValue(new_color)"}
 addUserKnob {22 Otro l "<div style=\"background-color: #465177; color: #465177; font-size: 7px;\">______</div><div style=\"background-color: #465177; color: #465177; font-size: 7px;\">______</div><div style=\"background-color: #465177; color: #465177; font-size: 7px;\">______</div>" t "Quickly apply a Backdrop for Pub" -STARTLINE T "import colorsys\nn=nuke.thisNode()\ndef clamp(x):\n    return int(max(0, min(x, 255)))\ntile_color=n\['tile_color'].value()\ncolors=\[\[0.63, 0.41, 0.47], \[0.63, 0.41, 0.47], \[0.63, 0.41, 0.47]]\n#converting colors\ncolors_hex=\[colorsys.hsv_to_rgb(color\[0],color\[1],color\[2]) for color in colors]\ncolors_int=\[int('%02x%02x%02x%02x' % (clamp(color\[0]*255),clamp(color\[1]*255),clamp(color\[2]*255),255), 16) for color in colors_hex]\n#selecting color logic\nif tile_color in colors_int:\n    current_index=colors_int.index(tile_color)\n    if current_index >= (len(colors_int)-1):\n        new_color = colors_int\[0]\n    else:\n        new_color = colors_int\[current_index+1]\nelse:\n    new_color = colors_int\[0]\n#apply color\nn\['tile_color'].setValue(new_color)"}
 addUserKnob {26 S08 l " " T " "}
 addUserKnob {22 copy_color l "   Copy Color   " -STARTLINE T "\nimport subprocess\nimport platform\n\nnode = nuke.thisNode()\n\ntile_color = node\['tile_color'].value()\ntile_color_hex = '\{:08x\}'.format(tile_color)  # Convertir a cadena hexadecimal de 8 digitos\n\n# Copiar al portapapeles segun el sistema operativo\nif platform.system() == 'Windows':\n    cmd = 'echo ' + tile_color_hex + '| clip'\n    subprocess.run(cmd, shell=True)\nelif platform.system() == 'Darwin':\n    cmd = 'echo ' + tile_color_hex + ' | pbcopy'\n    subprocess.run(cmd, shell=True)\nelse:\n    print(\"Sistema operativo no soportado para copiar al portapapeles\")\n\n#print(\"Color copiado al portapapeles:\", tile_color_hex)\n"}
 addUserKnob {22 paste_color l "   Paste Color   " -STARTLINE T "\nimport subprocess\nimport platform\n\nnode = nuke.thisNode()\n\n# Obtener el valor del portapapeles segun el sistema operativo\nif platform.system() == 'Windows':\n    cmd = 'powershell Get-Clipboard'\n    result = subprocess.run(cmd, shell=True, capture_output=True, text=True)\n    tile_color_hex = result.stdout.strip()\nelif platform.system() == 'Darwin':\n    cmd = 'pbpaste'\n    result = subprocess.run(cmd, shell=True, capture_output=True, text=True)\n    tile_color_hex = result.stdout.strip()\nelse:\n    print(\"Sistema operativo no soportado para pegar desde el portapapeles\")\n    tile_color_hex = None\n\nif tile_color_hex:\n    try:\n        tile_color = int(tile_color_hex, 16)\n        node\['tile_color'].setValue(tile_color)\n        #print(\"Color pegado desde el portapapeles:\", tile_color_hex)\n    except ValueError:\n        print(\"El valor en el portapapeles no es un color valido\")\n"}
 addUserKnob {26 S07 l " " T " "}
 addUserKnob {4 oz_appearance l " Appearance      " -STARTLINE M {Fill Border}}
 addUserKnob {26 S08 l " " -STARTLINE T "       "}
 addUserKnob {7 oz_border_width l Border t "Border width for Border appearence" -STARTLINE R 0 30}
 oz_border_width 2
 addUserKnob {26 divider2 l "" +STARTLINE}
 addUserKnob {26 S02 l " " T " "}
 addUserKnob {22 grow l " <img src=\"MergeMin.png\">" t "Grows the size of the Backdrop by 50pt in every direction" -STARTLINE T "n=nuke.thisNode()\n\ndef grow(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()-step)\n            n\['ypos'].setValue(n\['ypos'].getValue()-step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()+step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()+step*2)\n    except e:\n        print('Error:: %s' % e)\n\ngrow(n,50)"}
 addUserKnob {22 shrink l " <img src=\"MergeMax.png\">" t "Shrinks the size of the Backdrop by 50pt in every direction" -STARTLINE T "n=nuke.thisNode()\n\ndef shrink(node=None,step=50):\n    try:\n        if not node:\n            n=nuke.selectedNode()\n        else:\n            n=node\n            n\['xpos'].setValue(n\['xpos'].getValue()+step)\n            n\['ypos'].setValue(n\['ypos'].getValue()+step)\n            n\['bdwidth'].setValue(n\['bdwidth'].getValue()-step*2)\n            n\['bdheight'].setValue(n\['bdheight'].getValue()-step*2)\n    except e:\n        print('Error:: %s' % e)\n\nshrink(n,50)"}
 addUserKnob {26 S03 l " " -STARTLINE T "     "}
 addUserKnob {22 encompassSelectedNodes l " <img src=\"ContactSheet.png\">" t "Will resize the backdrop to encompass every selected nodes plus a padding number (the number next to the button)" -STARTLINE T "\nimport oz_encompassScript\noz_encompassScript.encompass_selected_nodes()\n"}
 addUserKnob {26 S04 l " " -STARTLINE T " "}
 addUserKnob {3 sides l "" t "When encompassing nodes this number of pt will be added to the Backdrop size in every direction" -STARTLINE}
 sides 50
 addUserKnob {26 divider3 l "" +STARTLINE}
 addUserKnob {26 S05 l " " -STARTLINE T " "}
 addUserKnob {26 pos_text l Position -STARTLINE T " "}
 addUserKnob {3 node_position_x l x -STARTLINE}
 node_position_x -135
 addUserKnob {3 node_position_y l y -STARTLINE}
 node_position_y -493
 addUserKnob {26 S06 l " " T " "}
 addUserKnob {14 sizeNode l "Size       " -STARTLINE R 0 100}
 sizeNode {468 315}
 addUserKnob {26 S09 l " " T " "}
 addUserKnob {22 copy_width l "Copy W" t "Copy the width of this backdrop to use in another backdrop" -STARTLINE T "\nimport subprocess\nimport platform\n\nnode = nuke.thisNode()\n\n# Funcion updateKnobs para actualizar todos los valores para hacer un refresh antes del copy\ndef updateKnobs(node):\n    nodeWidth = node\['bdwidth'].getValue()\n    nodeHeight = node\['bdheight'].getValue()\n    node\['sizeNode'].setValue(\[int(nodeWidth), int(nodeHeight)])\n    node\['zorder'].setValue(int(node\['z_order'].getValue()))\n    node\['font_size'].setValue(int(node\['note_font_size'].getValue()))\n    node\['oz_appearance'].setValue(node\['appearance'].value())\n    node\['oz_border_width'].setValue(node\['border_width'].value())\n\nupdateKnobs(node)\n\nsize_w = node\['sizeNode'].getValue()\[0]\n\n# Copiar al portapapeles segun el sistema operativo\nif platform.system() == 'Windows':\n    cmd = 'echo ' + str(size_w).strip() + '| clip'\n    subprocess.run(cmd, shell=True)\nelif platform.system() == 'Darwin':\n    cmd = 'echo ' + str(size_w).strip() + ' | pbcopy'\n    subprocess.run(cmd, shell=True)\nelse:\n    print(\"Sistema operativo no soportado para copiar al portapapeles\")\n\n#print(\"Size W copiado al portapapeles:\", size_w)\n"}
 addUserKnob {22 paste_width l "Paste W" t "Set this backdrop's width using the value copied from another backdrop" -STARTLINE T "\nimport subprocess\nimport platform\n\nnode = nuke.thisNode()\n\n# Obtener el valor del portapapeles segun el sistema operativo\nif platform.system() == 'Windows':\n    cmd = 'powershell Get-Clipboard'\n    result = subprocess.run(cmd, shell=True, capture_output=True, text=True)\n    size_w = result.stdout.strip()\nelif platform.system() == 'Darwin':\n    cmd = 'pbpaste'\n    result = subprocess.run(cmd, shell=True, capture_output=True, text=True)\n    size_w = result.stdout.strip()\nelse:\n    print(\"Sistema operativo no soportado para pegar desde el portapapeles\")\n    size_w = None\n\nif size_w:\n    try:\n        size_w = float(size_w)\n        node\['bdwidth'].setValue(size_w)\n        node\['sizeNode'].setValue(\[size_w, node\['sizeNode'].getValue()\[1]])\n        #print(\"Size W pegado desde el portapapeles:\", size_w)\n    except ValueError:\n        print(\"El valor en el portapapeles no es un numero valido\")\n"}
 addUserKnob {22 copy_height l "Copy H" t "Copy the height of this backdrop to use in another backdrop" -STARTLINE T "\nimport subprocess\nimport platform\n\nnode = nuke.thisNode()\n\n\n# Funcion updateKnobs para actualizar todos los valores para hacer un refresh antes del copy\ndef updateKnobs(node):\n    nodeWidth = node\['bdwidth'].getValue()\n    nodeHeight = node\['bdheight'].getValue()\n    node\['sizeNode'].setValue(\[int(nodeWidth), int(nodeHeight)])\n    node\['zorder'].setValue(int(node\['z_order'].getValue()))\n    node\['font_size'].setValue(int(node\['note_font_size'].getValue()))\n    node\['oz_appearance'].setValue(node\['appearance'].value())\n    node\['oz_border_width'].setValue(node\['border_width'].value())\n\nupdateKnobs(node)\n\nsize_h = node\['sizeNode'].getValue()\[1]\n\n# Copiar al portapapeles segun el sistema operativo\nif platform.system() == 'Windows':\n    cmd = 'echo ' + str(size_h).strip() + '| clip'\n    subprocess.run(cmd, shell=True)\nelif platform.system() == 'Darwin':\n    cmd = 'echo ' + str(size_h).strip() + ' | pbcopy'\n    subprocess.run(cmd, shell=True)\nelse:\n    print(\"Sistema operativo no soportado para copiar al portapapeles\")\n\nprint(\"Size H copiado al portapapeles:\", size_h)\n"}
 addUserKnob {22 paste_height l "Paste H" t "Set this backdrop's height using the value copied from another backdrop" -STARTLINE T "\nimport subprocess\nimport platform\n\nnode = nuke.thisNode()\n\n# Obtener el valor del portapapeles segun el sistema operativo\nif platform.system() == 'Windows':\n    cmd = 'powershell Get-Clipboard'\n    result = subprocess.run(cmd, shell=True, capture_output=True, text=True)\n    size_h = result.stdout.strip()\nelif platform.system() == 'Darwin':\n    cmd = 'pbpaste'\n    result = subprocess.run(cmd, shell=True, capture_output=True, text=True)\n    size_h = result.stdout.strip()\nelse:\n    print(\"Sistema operativo no soportado para pegar desde el portapapeles\")\n    size_h = None\n\nif size_h:\n    try:\n        size_h = float(size_h)\n        node\['bdheight'].setValue(size_h)\n        node\['sizeNode'].setValue(\[node\['sizeNode'].getValue()\[0], size_h])\n        #print(\"Size H pegado desde el portapapeles:\", size_h)\n    except ValueError:\n        print(\"El valor en el portapapeles no es un numero valido\")\n"}
 addUserKnob {26 divider4 l "" +STARTLINE}
 addUserKnob {26 z_order_label l "" -STARTLINE T "Z Order     "}
 addUserKnob {26 "" -STARTLINE T "Back "}
 addUserKnob {7 zorder l "" -STARTLINE R -5 5}
 zorder 4
 addUserKnob {26 "" -STARTLINE T " Front"}
}
push $cut_paste_input
Dot {
 name Dot63
 selected true
 xpos 221
 ypos -374
}
set N29925800 [stack 0]
Switch {
 which 1
 name Switch3
 label "\[value which]"
 selected true
 xpos 187
 ypos -274
}
push $N29925800
Write {
 channels rgba
 file "\[file dir \[value root.name]]/../2_prerenders/\[join \[lrange \[split \[file tail \[file rootname \[value root.name]]] _ ] 0 4] _]_Pre_v01/\[join \[lrange \[split \[file tail \[file rootname \[value root.name]]] _ ] 0 4] _]_Pre_v01_%04d.exr"
 file_type exr
 compression DWAA
 dw_compression_level 60
 first_part rgba
 create_directories true
 checkHashOnRead false
 version 3
 ocioColorspace "ACES - ACES2065-1"
 display ACES
 view sRGB
 name Write6
 selected true
 xpos 13
 ypos -383
 bookmark true
}
